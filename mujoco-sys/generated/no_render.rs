/* automatically generated by rust-bindgen 0.60.1 */

pub const mjVERSION_HEADER: u32 = 222;
pub const mjMINVAL: f64 = 0.000000000000001;
pub const mjPI: f64 = 3.141592653589793;
pub const mjMAXVAL: f64 = 10000000000.0;
pub const mjMINMU: f64 = 0.00001;
pub const mjMINIMP: f64 = 0.0001;
pub const mjMAXIMP: f64 = 0.9999;
pub const mjMAXCONPAIR: u32 = 50;
pub const mjMAXVFS: u32 = 2000;
pub const mjMAXVFSNAME: u32 = 1000;
pub const mjNEQDATA: u32 = 11;
pub const mjNDYN: u32 = 10;
pub const mjNGAIN: u32 = 10;
pub const mjNBIAS: u32 = 10;
pub const mjNFLUID: u32 = 12;
pub const mjNREF: u32 = 2;
pub const mjNIMP: u32 = 5;
pub const mjNSOLVER: u32 = 1000;
pub const mjNAUX: u32 = 10;
pub const mjMAXTEXTURE: u32 = 1000;
pub const mjMAXUISECT: u32 = 10;
pub const mjMAXUIITEM: u32 = 80;
pub const mjMAXUITEXT: u32 = 300;
pub const mjMAXUINAME: u32 = 40;
pub const mjMAXUIMULTI: u32 = 35;
pub const mjMAXUIEDIT: u32 = 7;
pub const mjMAXUIRECT: u32 = 25;
pub const mjSEPCLOSED: u32 = 1000;
pub const mjKEY_ESCAPE: u32 = 256;
pub const mjKEY_ENTER: u32 = 257;
pub const mjKEY_TAB: u32 = 258;
pub const mjKEY_BACKSPACE: u32 = 259;
pub const mjKEY_INSERT: u32 = 260;
pub const mjKEY_DELETE: u32 = 261;
pub const mjKEY_RIGHT: u32 = 262;
pub const mjKEY_LEFT: u32 = 263;
pub const mjKEY_DOWN: u32 = 264;
pub const mjKEY_UP: u32 = 265;
pub const mjKEY_PAGE_UP: u32 = 266;
pub const mjKEY_PAGE_DOWN: u32 = 267;
pub const mjKEY_HOME: u32 = 268;
pub const mjKEY_END: u32 = 269;
pub const mjKEY_F1: u32 = 290;
pub const mjKEY_F2: u32 = 291;
pub const mjKEY_F3: u32 = 292;
pub const mjKEY_F4: u32 = 293;
pub const mjKEY_F5: u32 = 294;
pub const mjKEY_F6: u32 = 295;
pub const mjKEY_F7: u32 = 296;
pub const mjKEY_F8: u32 = 297;
pub const mjKEY_F9: u32 = 298;
pub const mjKEY_F10: u32 = 299;
pub const mjKEY_F11: u32 = 300;
pub const mjKEY_F12: u32 = 301;
pub const mjNGROUP: u32 = 6;
pub const mjMAXLIGHT: u32 = 100;
pub const mjMAXOVERLAY: u32 = 500;
pub const mjMAXLINE: u32 = 100;
pub const mjMAXLINEPNT: u32 = 1000;
pub const mjMAXPLANEGRID: u32 = 200;
pub type mjtNum = f64;
pub type mjtByte = ::std::os::raw::c_uchar;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtDisableBit_ {
    CONSTRAINT = 1,
    EQUALITY = 2,
    FRICTIONLOSS = 4,
    LIMIT = 8,
    CONTACT = 16,
    PASSIVE = 32,
    GRAVITY = 64,
    CLAMPCTRL = 128,
    WARMSTART = 256,
    FILTERPARENT = 512,
    ACTUATION = 1024,
    REFSAFE = 2048,
    SENSOR = 4096,
    mjNDISABLE = 13,
}
pub use self::mjtDisableBit_ as mjtDisableBit;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtEnableBit_ {
    OVERRIDE = 1,
    ENERGY = 2,
    FWDINV = 4,
    SENSORNOISE = 8,
    MULTICCD = 16,
    mjNENABLE = 5,
}
pub use self::mjtEnableBit_ as mjtEnableBit;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtJoint_ {
    FREE = 0,
    BALL = 1,
    SLIDE = 2,
    HINGE = 3,
}
pub use self::mjtJoint_ as mjtJoint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtGeom_ {
    PLANE = 0,
    HFIELD = 1,
    SPHERE = 2,
    CAPSULE = 3,
    ELLIPSOID = 4,
    CYLINDER = 5,
    BOX = 6,
    MESH = 7,
    mjNGEOMTYPES = 8,
    ARROW = 100,
    ARROW1 = 101,
    ARROW2 = 102,
    LINE = 103,
    SKIN = 104,
    LABEL = 105,
    NONE = 1001,
}
pub use self::mjtGeom_ as mjtGeom;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtCamLight_ {
    FIXED = 0,
    TRACK = 1,
    TRACKCOM = 2,
    TARGETBODY = 3,
    TARGETBODYCOM = 4,
}
pub use self::mjtCamLight_ as mjtCamLight;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtTexture_ {
    TWO_D = 0,
    CUBE = 1,
    SKYBOX = 2,
}
pub use self::mjtTexture_ as mjtTexture;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtIntegrator_ {
    EULER = 0,
    RK4 = 1,
    IMPLICIT = 2,
}
pub use self::mjtIntegrator_ as mjtIntegrator;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtCollision_ {
    ALL = 0,
    PAIR = 1,
    DYNAMIC = 2,
}
pub use self::mjtCollision_ as mjtCollision;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtCone_ {
    PYRAMIDAL = 0,
    ELLIPTIC = 1,
}
pub use self::mjtCone_ as mjtCone;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtJacobian_ {
    DENSE = 0,
    SPARSE = 1,
    AUTO = 2,
}
pub use self::mjtJacobian_ as mjtJacobian;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtSolver_ {
    PGS = 0,
    CG = 1,
    NEWTON = 2,
}
pub use self::mjtSolver_ as mjtSolver;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtEq_ {
    CONNECT = 0,
    WELD = 1,
    JOINT = 2,
    TENDON = 3,
    DISTANCE = 4,
}
pub use self::mjtEq_ as mjtEq;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtWrap_ {
    NONE = 0,
    JOINT = 1,
    PULLEY = 2,
    SITE = 3,
    SPHERE = 4,
    CYLINDER = 5,
}
pub use self::mjtWrap_ as mjtWrap;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtTrn_ {
    JOINT = 0,
    JOINTINPARENT = 1,
    SLIDERCRANK = 2,
    TENDON = 3,
    SITE = 4,
    BODY = 5,
    UNDEFINED = 1000,
}
pub use self::mjtTrn_ as mjtTrn;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtDyn_ {
    NONE = 0,
    INTEGRATOR = 1,
    FILTER = 2,
    MUSCLE = 3,
    USER = 4,
}
pub use self::mjtDyn_ as mjtDyn;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtGain_ {
    FIXED = 0,
    AFFINE = 1,
    MUSCLE = 2,
    USER = 3,
}
pub use self::mjtGain_ as mjtGain;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtBias_ {
    NONE = 0,
    AFFINE = 1,
    MUSCLE = 2,
    USER = 3,
}
pub use self::mjtBias_ as mjtBias;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtObj_ {
    UNKNOWN = 0,
    BODY = 1,
    XBODY = 2,
    JOINT = 3,
    DOF = 4,
    GEOM = 5,
    SITE = 6,
    CAMERA = 7,
    LIGHT = 8,
    MESH = 9,
    SKIN = 10,
    HFIELD = 11,
    TEXTURE = 12,
    MATERIAL = 13,
    PAIR = 14,
    EXCLUDE = 15,
    EQUALITY = 16,
    TENDON = 17,
    ACTUATOR = 18,
    SENSOR = 19,
    NUMERIC = 20,
    TEXT = 21,
    TUPLE = 22,
    KEY = 23,
    PLUGIN = 24,
}
pub use self::mjtObj_ as mjtObj;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtConstraint_ {
    EQUALITY = 0,
    FRICTION_DOF = 1,
    FRICTION_TENDON = 2,
    LIMIT_JOINT = 3,
    LIMIT_TENDON = 4,
    CONTACT_FRICTIONLESS = 5,
    CONTACT_PYRAMIDAL = 6,
    CONTACT_ELLIPTIC = 7,
}
pub use self::mjtConstraint_ as mjtConstraint;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtConstraintState_ {
    SATISFIED = 0,
    QUADRATIC = 1,
    LINEARNEG = 2,
    LINEARPOS = 3,
    CONE = 4,
}
pub use self::mjtConstraintState_ as mjtConstraintState;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtSensor_ {
    TOUCH = 0,
    ACCELEROMETER = 1,
    VELOCIMETER = 2,
    GYRO = 3,
    FORCE = 4,
    TORQUE = 5,
    MAGNETOMETER = 6,
    RANGEFINDER = 7,
    JOINTPOS = 8,
    JOINTVEL = 9,
    TENDONPOS = 10,
    TENDONVEL = 11,
    ACTUATORPOS = 12,
    ACTUATORVEL = 13,
    ACTUATORFRC = 14,
    BALLQUAT = 15,
    BALLANGVEL = 16,
    JOINTLIMITPOS = 17,
    JOINTLIMITVEL = 18,
    JOINTLIMITFRC = 19,
    TENDONLIMITPOS = 20,
    TENDONLIMITVEL = 21,
    TENDONLIMITFRC = 22,
    FRAMEPOS = 23,
    FRAMEQUAT = 24,
    FRAMEXAXIS = 25,
    FRAMEYAXIS = 26,
    FRAMEZAXIS = 27,
    FRAMELINVEL = 28,
    FRAMEANGVEL = 29,
    FRAMELINACC = 30,
    FRAMEANGACC = 31,
    SUBTREECOM = 32,
    SUBTREELINVEL = 33,
    SUBTREEANGMOM = 34,
    CLOCK = 35,
    PLUGIN = 36,
    USER = 37,
}
pub use self::mjtSensor_ as mjtSensor;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtStage_ {
    NONE = 0,
    POS = 1,
    VEL = 2,
    ACC = 3,
}
pub use self::mjtStage_ as mjtStage;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtDataType_ {
    REAL = 0,
    POSITIVE = 1,
    AXIS = 2,
    QUATERNION = 3,
}
pub use self::mjtDataType_ as mjtDataType;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtLRMode_ {
    NONE = 0,
    MUSCLE = 1,
    MUSCLEUSER = 2,
    ALL = 3,
}
pub use self::mjtLRMode_ as mjtLRMode;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjLROpt_ {
    pub mode: ::std::os::raw::c_int,
    pub useexisting: ::std::os::raw::c_int,
    pub uselimit: ::std::os::raw::c_int,
    pub accel: mjtNum,
    pub maxforce: mjtNum,
    pub timeconst: mjtNum,
    pub timestep: mjtNum,
    pub inttotal: mjtNum,
    pub inteval: mjtNum,
    pub tolrange: mjtNum,
}
#[test]
fn bindgen_test_layout_mjLROpt_() {
    assert_eq!(
        ::std::mem::size_of::<mjLROpt_>(),
        72usize,
        concat!("Size of: ", stringify!(mjLROpt_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjLROpt_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjLROpt_))
    );
    fn test_field_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mode) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(mode)
            )
        );
    }
    test_field_mode();
    fn test_field_useexisting() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).useexisting) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(useexisting)
            )
        );
    }
    test_field_useexisting();
    fn test_field_uselimit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).uselimit) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(uselimit)
            )
        );
    }
    test_field_uselimit();
    fn test_field_accel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).accel) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(accel)
            )
        );
    }
    test_field_accel();
    fn test_field_maxforce() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxforce) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(maxforce)
            )
        );
    }
    test_field_maxforce();
    fn test_field_timeconst() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timeconst) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(timeconst)
            )
        );
    }
    test_field_timeconst();
    fn test_field_timestep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timestep) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(timestep)
            )
        );
    }
    test_field_timestep();
    fn test_field_inttotal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inttotal) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(inttotal)
            )
        );
    }
    test_field_inttotal();
    fn test_field_inteval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inteval) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(inteval)
            )
        );
    }
    test_field_inteval();
    fn test_field_tolrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjLROpt_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tolrange) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mjLROpt_),
                "::",
                stringify!(tolrange)
            )
        );
    }
    test_field_tolrange();
}
pub type mjLROpt = mjLROpt_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjVFS_ {
    pub nfile: ::std::os::raw::c_int,
    pub filename: [[::std::os::raw::c_char; 1000usize]; 2000usize],
    pub filesize: [::std::os::raw::c_int; 2000usize],
    pub filedata: [*mut ::std::os::raw::c_void; 2000usize],
}
#[test]
fn bindgen_test_layout_mjVFS_() {
    assert_eq!(
        ::std::mem::size_of::<mjVFS_>(),
        2024008usize,
        concat!("Size of: ", stringify!(mjVFS_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVFS_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjVFS_))
    );
    fn test_field_nfile() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVFS_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nfile) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVFS_),
                "::",
                stringify!(nfile)
            )
        );
    }
    test_field_nfile();
    fn test_field_filename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVFS_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filename) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVFS_),
                "::",
                stringify!(filename)
            )
        );
    }
    test_field_filename();
    fn test_field_filesize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVFS_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filesize) as usize - ptr as usize
            },
            2000004usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVFS_),
                "::",
                stringify!(filesize)
            )
        );
    }
    test_field_filesize();
    fn test_field_filedata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVFS_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).filedata) as usize - ptr as usize
            },
            2008008usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVFS_),
                "::",
                stringify!(filedata)
            )
        );
    }
    test_field_filedata();
}
impl Default for mjVFS_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjVFS = mjVFS_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjOption_ {
    pub timestep: mjtNum,
    pub apirate: mjtNum,
    pub impratio: mjtNum,
    pub tolerance: mjtNum,
    pub noslip_tolerance: mjtNum,
    pub mpr_tolerance: mjtNum,
    pub gravity: [mjtNum; 3usize],
    pub wind: [mjtNum; 3usize],
    pub magnetic: [mjtNum; 3usize],
    pub density: mjtNum,
    pub viscosity: mjtNum,
    pub o_margin: mjtNum,
    pub o_solref: [mjtNum; 2usize],
    pub o_solimp: [mjtNum; 5usize],
    pub integrator: ::std::os::raw::c_int,
    pub collision: ::std::os::raw::c_int,
    pub cone: ::std::os::raw::c_int,
    pub jacobian: ::std::os::raw::c_int,
    pub solver: ::std::os::raw::c_int,
    pub iterations: ::std::os::raw::c_int,
    pub noslip_iterations: ::std::os::raw::c_int,
    pub mpr_iterations: ::std::os::raw::c_int,
    pub disableflags: ::std::os::raw::c_int,
    pub enableflags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjOption_() {
    assert_eq!(
        ::std::mem::size_of::<mjOption_>(),
        240usize,
        concat!("Size of: ", stringify!(mjOption_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjOption_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjOption_))
    );
    fn test_field_timestep() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timestep) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(timestep)
            )
        );
    }
    test_field_timestep();
    fn test_field_apirate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).apirate) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(apirate)
            )
        );
    }
    test_field_apirate();
    fn test_field_impratio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).impratio) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(impratio)
            )
        );
    }
    test_field_impratio();
    fn test_field_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tolerance) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(tolerance)
            )
        );
    }
    test_field_tolerance();
    fn test_field_noslip_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).noslip_tolerance) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(noslip_tolerance)
            )
        );
    }
    test_field_noslip_tolerance();
    fn test_field_mpr_tolerance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpr_tolerance) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(mpr_tolerance)
            )
        );
    }
    test_field_mpr_tolerance();
    fn test_field_gravity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gravity) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(gravity)
            )
        );
    }
    test_field_gravity();
    fn test_field_wind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wind) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(wind)
            )
        );
    }
    test_field_wind();
    fn test_field_magnetic() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).magnetic) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(magnetic)
            )
        );
    }
    test_field_magnetic();
    fn test_field_density() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).density) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(density)
            )
        );
    }
    test_field_density();
    fn test_field_viscosity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).viscosity) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(viscosity)
            )
        );
    }
    test_field_viscosity();
    fn test_field_o_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).o_margin) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(o_margin)
            )
        );
    }
    test_field_o_margin();
    fn test_field_o_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).o_solref) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(o_solref)
            )
        );
    }
    test_field_o_solref();
    fn test_field_o_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).o_solimp) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(o_solimp)
            )
        );
    }
    test_field_o_solimp();
    fn test_field_integrator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).integrator) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(integrator)
            )
        );
    }
    test_field_integrator();
    fn test_field_collision() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).collision) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(collision)
            )
        );
    }
    test_field_collision();
    fn test_field_cone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cone) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(cone)
            )
        );
    }
    test_field_cone();
    fn test_field_jacobian() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jacobian) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(jacobian)
            )
        );
    }
    test_field_jacobian();
    fn test_field_solver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(solver)
            )
        );
    }
    test_field_solver();
    fn test_field_iterations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).iterations) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(iterations)
            )
        );
    }
    test_field_iterations();
    fn test_field_noslip_iterations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).noslip_iterations) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(noslip_iterations)
            )
        );
    }
    test_field_noslip_iterations();
    fn test_field_mpr_iterations() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mpr_iterations) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(mpr_iterations)
            )
        );
    }
    test_field_mpr_iterations();
    fn test_field_disableflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).disableflags) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(disableflags)
            )
        );
    }
    test_field_disableflags();
    fn test_field_enableflags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enableflags) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(mjOption_),
                "::",
                stringify!(enableflags)
            )
        );
    }
    test_field_enableflags();
}
pub type mjOption = mjOption_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual_ {
    pub global: mjVisual___bindgen_ty_1,
    pub quality: mjVisual___bindgen_ty_2,
    pub headlight: mjVisual___bindgen_ty_3,
    pub map: mjVisual___bindgen_ty_4,
    pub scale: mjVisual___bindgen_ty_5,
    pub rgba: mjVisual___bindgen_ty_6,
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_1 {
    pub fovy: f32,
    pub ipd: f32,
    pub azimuth: f32,
    pub elevation: f32,
    pub linewidth: f32,
    pub glow: f32,
    pub offwidth: ::std::os::raw::c_int,
    pub offheight: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_1))
    );
    fn test_field_fovy() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fovy) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(fovy)
            )
        );
    }
    test_field_fovy();
    fn test_field_ipd() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ipd) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(ipd)
            )
        );
    }
    test_field_ipd();
    fn test_field_azimuth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).azimuth) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(azimuth)
            )
        );
    }
    test_field_azimuth();
    fn test_field_elevation() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(elevation)
            )
        );
    }
    test_field_elevation();
    fn test_field_linewidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linewidth) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(linewidth)
            )
        );
    }
    test_field_linewidth();
    fn test_field_glow() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).glow) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(glow)
            )
        );
    }
    test_field_glow();
    fn test_field_offwidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offwidth) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(offwidth)
            )
        );
    }
    test_field_offwidth();
    fn test_field_offheight() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offheight) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_1),
                "::",
                stringify!(offheight)
            )
        );
    }
    test_field_offheight();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_2 {
    pub shadowsize: ::std::os::raw::c_int,
    pub offsamples: ::std::os::raw::c_int,
    pub numslices: ::std::os::raw::c_int,
    pub numstacks: ::std::os::raw::c_int,
    pub numquads: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_2>(),
        20usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_2))
    );
    fn test_field_shadowsize() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowsize) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_2),
                "::",
                stringify!(shadowsize)
            )
        );
    }
    test_field_shadowsize();
    fn test_field_offsamples() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offsamples) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_2),
                "::",
                stringify!(offsamples)
            )
        );
    }
    test_field_offsamples();
    fn test_field_numslices() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numslices) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_2),
                "::",
                stringify!(numslices)
            )
        );
    }
    test_field_numslices();
    fn test_field_numstacks() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numstacks) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_2),
                "::",
                stringify!(numstacks)
            )
        );
    }
    test_field_numstacks();
    fn test_field_numquads() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_2>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numquads) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_2),
                "::",
                stringify!(numquads)
            )
        );
    }
    test_field_numquads();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_3 {
    pub ambient: [f32; 3usize],
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub active: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_3>(),
        40usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_3>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_3))
    );
    fn test_field_ambient() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_3),
                "::",
                stringify!(ambient)
            )
        );
    }
    test_field_ambient();
    fn test_field_diffuse() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).diffuse) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_3),
                "::",
                stringify!(diffuse)
            )
        );
    }
    test_field_diffuse();
    fn test_field_specular() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specular) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_3),
                "::",
                stringify!(specular)
            )
        );
    }
    test_field_specular();
    fn test_field_active() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_3>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_3),
                "::",
                stringify!(active)
            )
        );
    }
    test_field_active();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_4 {
    pub stiffness: f32,
    pub stiffnessrot: f32,
    pub force: f32,
    pub torque: f32,
    pub alpha: f32,
    pub fogstart: f32,
    pub fogend: f32,
    pub znear: f32,
    pub zfar: f32,
    pub haze: f32,
    pub shadowclip: f32,
    pub shadowscale: f32,
    pub actuatortendon: f32,
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_4>(),
        52usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_4>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_4))
    );
    fn test_field_stiffness() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stiffness) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(stiffness)
            )
        );
    }
    test_field_stiffness();
    fn test_field_stiffnessrot() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stiffnessrot) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(stiffnessrot)
            )
        );
    }
    test_field_stiffnessrot();
    fn test_field_force() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).force) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(force)
            )
        );
    }
    test_field_force();
    fn test_field_torque() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).torque) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(torque)
            )
        );
    }
    test_field_torque();
    fn test_field_alpha() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(alpha)
            )
        );
    }
    test_field_alpha();
    fn test_field_fogstart() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fogstart) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(fogstart)
            )
        );
    }
    test_field_fogstart();
    fn test_field_fogend() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fogend) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(fogend)
            )
        );
    }
    test_field_fogend();
    fn test_field_znear() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).znear) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(znear)
            )
        );
    }
    test_field_znear();
    fn test_field_zfar() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).zfar) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(zfar)
            )
        );
    }
    test_field_zfar();
    fn test_field_haze() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).haze) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(haze)
            )
        );
    }
    test_field_haze();
    fn test_field_shadowclip() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowclip) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(shadowclip)
            )
        );
    }
    test_field_shadowclip();
    fn test_field_shadowscale() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowscale) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(shadowscale)
            )
        );
    }
    test_field_shadowscale();
    fn test_field_actuatortendon() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_4>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatortendon) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_4),
                "::",
                stringify!(actuatortendon)
            )
        );
    }
    test_field_actuatortendon();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_5 {
    pub forcewidth: f32,
    pub contactwidth: f32,
    pub contactheight: f32,
    pub connect: f32,
    pub com: f32,
    pub camera: f32,
    pub light: f32,
    pub selectpoint: f32,
    pub jointlength: f32,
    pub jointwidth: f32,
    pub actuatorlength: f32,
    pub actuatorwidth: f32,
    pub framelength: f32,
    pub framewidth: f32,
    pub constraint: f32,
    pub slidercrank: f32,
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_5>(),
        64usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_5>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_5))
    );
    fn test_field_forcewidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).forcewidth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(forcewidth)
            )
        );
    }
    test_field_forcewidth();
    fn test_field_contactwidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactwidth) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(contactwidth)
            )
        );
    }
    test_field_contactwidth();
    fn test_field_contactheight() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactheight) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(contactheight)
            )
        );
    }
    test_field_contactheight();
    fn test_field_connect() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(connect)
            )
        );
    }
    test_field_connect();
    fn test_field_com() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(com)
            )
        );
    }
    test_field_com();
    fn test_field_camera() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).camera) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(camera)
            )
        );
    }
    test_field_camera();
    fn test_field_light() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(light)
            )
        );
    }
    test_field_light();
    fn test_field_selectpoint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).selectpoint) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(selectpoint)
            )
        );
    }
    test_field_selectpoint();
    fn test_field_jointlength() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jointlength) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(jointlength)
            )
        );
    }
    test_field_jointlength();
    fn test_field_jointwidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jointwidth) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(jointwidth)
            )
        );
    }
    test_field_jointwidth();
    fn test_field_actuatorlength() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatorlength) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(actuatorlength)
            )
        );
    }
    test_field_actuatorlength();
    fn test_field_actuatorwidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatorwidth) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(actuatorwidth)
            )
        );
    }
    test_field_actuatorwidth();
    fn test_field_framelength() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).framelength) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(framelength)
            )
        );
    }
    test_field_framelength();
    fn test_field_framewidth() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).framewidth) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(framewidth)
            )
        );
    }
    test_field_framewidth();
    fn test_field_constraint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(constraint)
            )
        );
    }
    test_field_constraint();
    fn test_field_slidercrank() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_5>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slidercrank) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_5),
                "::",
                stringify!(slidercrank)
            )
        );
    }
    test_field_slidercrank();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjVisual___bindgen_ty_6 {
    pub fog: [f32; 4usize],
    pub haze: [f32; 4usize],
    pub force: [f32; 4usize],
    pub inertia: [f32; 4usize],
    pub joint: [f32; 4usize],
    pub actuator: [f32; 4usize],
    pub actuatornegative: [f32; 4usize],
    pub actuatorpositive: [f32; 4usize],
    pub com: [f32; 4usize],
    pub camera: [f32; 4usize],
    pub light: [f32; 4usize],
    pub selectpoint: [f32; 4usize],
    pub connect: [f32; 4usize],
    pub contactpoint: [f32; 4usize],
    pub contactforce: [f32; 4usize],
    pub contactfriction: [f32; 4usize],
    pub contacttorque: [f32; 4usize],
    pub contactgap: [f32; 4usize],
    pub rangefinder: [f32; 4usize],
    pub constraint: [f32; 4usize],
    pub slidercrank: [f32; 4usize],
    pub crankbroken: [f32; 4usize],
}
#[test]
fn bindgen_test_layout_mjVisual___bindgen_ty_6() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual___bindgen_ty_6>(),
        352usize,
        concat!("Size of: ", stringify!(mjVisual___bindgen_ty_6))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual___bindgen_ty_6>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual___bindgen_ty_6))
    );
    fn test_field_fog() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fog) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(fog)
            )
        );
    }
    test_field_fog();
    fn test_field_haze() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).haze) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(haze)
            )
        );
    }
    test_field_haze();
    fn test_field_force() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).force) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(force)
            )
        );
    }
    test_field_force();
    fn test_field_inertia() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).inertia) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(inertia)
            )
        );
    }
    test_field_inertia();
    fn test_field_joint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).joint) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(joint)
            )
        );
    }
    test_field_joint();
    fn test_field_actuator() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(actuator)
            )
        );
    }
    test_field_actuator();
    fn test_field_actuatornegative() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatornegative) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(actuatornegative)
            )
        );
    }
    test_field_actuatornegative();
    fn test_field_actuatorpositive() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatorpositive) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(actuatorpositive)
            )
        );
    }
    test_field_actuatorpositive();
    fn test_field_com() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).com) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(com)
            )
        );
    }
    test_field_com();
    fn test_field_camera() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).camera) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(camera)
            )
        );
    }
    test_field_camera();
    fn test_field_light() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(light)
            )
        );
    }
    test_field_light();
    fn test_field_selectpoint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).selectpoint) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(selectpoint)
            )
        );
    }
    test_field_selectpoint();
    fn test_field_connect() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).connect) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(connect)
            )
        );
    }
    test_field_connect();
    fn test_field_contactpoint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactpoint) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(contactpoint)
            )
        );
    }
    test_field_contactpoint();
    fn test_field_contactforce() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactforce) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(contactforce)
            )
        );
    }
    test_field_contactforce();
    fn test_field_contactfriction() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactfriction) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(contactfriction)
            )
        );
    }
    test_field_contactfriction();
    fn test_field_contacttorque() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contacttorque) as usize - ptr as usize
            },
            256usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(contacttorque)
            )
        );
    }
    test_field_contacttorque();
    fn test_field_contactgap() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contactgap) as usize - ptr as usize
            },
            272usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(contactgap)
            )
        );
    }
    test_field_contactgap();
    fn test_field_rangefinder() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangefinder) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(rangefinder)
            )
        );
    }
    test_field_rangefinder();
    fn test_field_constraint() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(constraint)
            )
        );
    }
    test_field_constraint();
    fn test_field_slidercrank() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slidercrank) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(slidercrank)
            )
        );
    }
    test_field_slidercrank();
    fn test_field_crankbroken() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjVisual___bindgen_ty_6>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crankbroken) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual___bindgen_ty_6),
                "::",
                stringify!(crankbroken)
            )
        );
    }
    test_field_crankbroken();
}
#[test]
fn bindgen_test_layout_mjVisual_() {
    assert_eq!(
        ::std::mem::size_of::<mjVisual_>(),
        560usize,
        concat!("Size of: ", stringify!(mjVisual_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjVisual_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjVisual_))
    );
    fn test_field_global() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).global) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(global)
            )
        );
    }
    test_field_global();
    fn test_field_quality() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).quality) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(quality)
            )
        );
    }
    test_field_quality();
    fn test_field_headlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).headlight) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(headlight)
            )
        );
    }
    test_field_headlight();
    fn test_field_map() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).map) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(map)
            )
        );
    }
    test_field_map();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjVisual_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rgba) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjVisual_),
                "::",
                stringify!(rgba)
            )
        );
    }
    test_field_rgba();
}
pub type mjVisual = mjVisual_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjStatistic_ {
    pub meaninertia: mjtNum,
    pub meanmass: mjtNum,
    pub meansize: mjtNum,
    pub extent: mjtNum,
    pub center: [mjtNum; 3usize],
}
#[test]
fn bindgen_test_layout_mjStatistic_() {
    assert_eq!(
        ::std::mem::size_of::<mjStatistic_>(),
        56usize,
        concat!("Size of: ", stringify!(mjStatistic_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjStatistic_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjStatistic_))
    );
    fn test_field_meaninertia() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjStatistic_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meaninertia) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjStatistic_),
                "::",
                stringify!(meaninertia)
            )
        );
    }
    test_field_meaninertia();
    fn test_field_meanmass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjStatistic_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meanmass) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjStatistic_),
                "::",
                stringify!(meanmass)
            )
        );
    }
    test_field_meanmass();
    fn test_field_meansize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjStatistic_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).meansize) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjStatistic_),
                "::",
                stringify!(meansize)
            )
        );
    }
    test_field_meansize();
    fn test_field_extent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjStatistic_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).extent) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjStatistic_),
                "::",
                stringify!(extent)
            )
        );
    }
    test_field_extent();
    fn test_field_center() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjStatistic_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).center) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjStatistic_),
                "::",
                stringify!(center)
            )
        );
    }
    test_field_center();
}
pub type mjStatistic = mjStatistic_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjModel_ {
    pub nq: ::std::os::raw::c_int,
    pub nv: ::std::os::raw::c_int,
    pub nu: ::std::os::raw::c_int,
    pub na: ::std::os::raw::c_int,
    pub nbody: ::std::os::raw::c_int,
    pub njnt: ::std::os::raw::c_int,
    pub ngeom: ::std::os::raw::c_int,
    pub nsite: ::std::os::raw::c_int,
    pub ncam: ::std::os::raw::c_int,
    pub nlight: ::std::os::raw::c_int,
    pub nmesh: ::std::os::raw::c_int,
    pub nmeshvert: ::std::os::raw::c_int,
    pub nmeshtexvert: ::std::os::raw::c_int,
    pub nmeshface: ::std::os::raw::c_int,
    pub nmeshgraph: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub nskinvert: ::std::os::raw::c_int,
    pub nskintexvert: ::std::os::raw::c_int,
    pub nskinface: ::std::os::raw::c_int,
    pub nskinbone: ::std::os::raw::c_int,
    pub nskinbonevert: ::std::os::raw::c_int,
    pub nhfield: ::std::os::raw::c_int,
    pub nhfielddata: ::std::os::raw::c_int,
    pub ntex: ::std::os::raw::c_int,
    pub ntexdata: ::std::os::raw::c_int,
    pub nmat: ::std::os::raw::c_int,
    pub npair: ::std::os::raw::c_int,
    pub nexclude: ::std::os::raw::c_int,
    pub neq: ::std::os::raw::c_int,
    pub ntendon: ::std::os::raw::c_int,
    pub nwrap: ::std::os::raw::c_int,
    pub nsensor: ::std::os::raw::c_int,
    pub nnumeric: ::std::os::raw::c_int,
    pub nnumericdata: ::std::os::raw::c_int,
    pub ntext: ::std::os::raw::c_int,
    pub ntextdata: ::std::os::raw::c_int,
    pub ntuple: ::std::os::raw::c_int,
    pub ntupledata: ::std::os::raw::c_int,
    pub nkey: ::std::os::raw::c_int,
    pub nmocap: ::std::os::raw::c_int,
    pub nplugin: ::std::os::raw::c_int,
    pub npluginattr: ::std::os::raw::c_int,
    pub nuser_body: ::std::os::raw::c_int,
    pub nuser_jnt: ::std::os::raw::c_int,
    pub nuser_geom: ::std::os::raw::c_int,
    pub nuser_site: ::std::os::raw::c_int,
    pub nuser_cam: ::std::os::raw::c_int,
    pub nuser_tendon: ::std::os::raw::c_int,
    pub nuser_actuator: ::std::os::raw::c_int,
    pub nuser_sensor: ::std::os::raw::c_int,
    pub nnames: ::std::os::raw::c_int,
    pub nM: ::std::os::raw::c_int,
    pub nD: ::std::os::raw::c_int,
    pub nemax: ::std::os::raw::c_int,
    pub njmax: ::std::os::raw::c_int,
    pub nconmax: ::std::os::raw::c_int,
    pub nstack: ::std::os::raw::c_int,
    pub nuserdata: ::std::os::raw::c_int,
    pub nsensordata: ::std::os::raw::c_int,
    pub npluginstate: ::std::os::raw::c_int,
    pub nbuffer: ::std::os::raw::c_int,
    pub opt: mjOption,
    pub vis: mjVisual,
    pub stat: mjStatistic,
    pub buffer: *mut ::std::os::raw::c_void,
    pub qpos0: *mut mjtNum,
    pub qpos_spring: *mut mjtNum,
    pub body_parentid: *mut ::std::os::raw::c_int,
    pub body_rootid: *mut ::std::os::raw::c_int,
    pub body_weldid: *mut ::std::os::raw::c_int,
    pub body_mocapid: *mut ::std::os::raw::c_int,
    pub body_jntnum: *mut ::std::os::raw::c_int,
    pub body_jntadr: *mut ::std::os::raw::c_int,
    pub body_dofnum: *mut ::std::os::raw::c_int,
    pub body_dofadr: *mut ::std::os::raw::c_int,
    pub body_geomnum: *mut ::std::os::raw::c_int,
    pub body_geomadr: *mut ::std::os::raw::c_int,
    pub body_simple: *mut mjtByte,
    pub body_sameframe: *mut mjtByte,
    pub body_pos: *mut mjtNum,
    pub body_quat: *mut mjtNum,
    pub body_ipos: *mut mjtNum,
    pub body_iquat: *mut mjtNum,
    pub body_mass: *mut mjtNum,
    pub body_subtreemass: *mut mjtNum,
    pub body_inertia: *mut mjtNum,
    pub body_invweight0: *mut mjtNum,
    pub body_user: *mut mjtNum,
    pub jnt_type: *mut ::std::os::raw::c_int,
    pub jnt_qposadr: *mut ::std::os::raw::c_int,
    pub jnt_dofadr: *mut ::std::os::raw::c_int,
    pub jnt_bodyid: *mut ::std::os::raw::c_int,
    pub jnt_group: *mut ::std::os::raw::c_int,
    pub jnt_limited: *mut mjtByte,
    pub jnt_solref: *mut mjtNum,
    pub jnt_solimp: *mut mjtNum,
    pub jnt_pos: *mut mjtNum,
    pub jnt_axis: *mut mjtNum,
    pub jnt_stiffness: *mut mjtNum,
    pub jnt_range: *mut mjtNum,
    pub jnt_margin: *mut mjtNum,
    pub jnt_user: *mut mjtNum,
    pub dof_bodyid: *mut ::std::os::raw::c_int,
    pub dof_jntid: *mut ::std::os::raw::c_int,
    pub dof_parentid: *mut ::std::os::raw::c_int,
    pub dof_Madr: *mut ::std::os::raw::c_int,
    pub dof_simplenum: *mut ::std::os::raw::c_int,
    pub dof_solref: *mut mjtNum,
    pub dof_solimp: *mut mjtNum,
    pub dof_frictionloss: *mut mjtNum,
    pub dof_armature: *mut mjtNum,
    pub dof_damping: *mut mjtNum,
    pub dof_invweight0: *mut mjtNum,
    pub dof_M0: *mut mjtNum,
    pub geom_type: *mut ::std::os::raw::c_int,
    pub geom_contype: *mut ::std::os::raw::c_int,
    pub geom_conaffinity: *mut ::std::os::raw::c_int,
    pub geom_condim: *mut ::std::os::raw::c_int,
    pub geom_bodyid: *mut ::std::os::raw::c_int,
    pub geom_dataid: *mut ::std::os::raw::c_int,
    pub geom_matid: *mut ::std::os::raw::c_int,
    pub geom_group: *mut ::std::os::raw::c_int,
    pub geom_priority: *mut ::std::os::raw::c_int,
    pub geom_sameframe: *mut mjtByte,
    pub geom_solmix: *mut mjtNum,
    pub geom_solref: *mut mjtNum,
    pub geom_solimp: *mut mjtNum,
    pub geom_size: *mut mjtNum,
    pub geom_rbound: *mut mjtNum,
    pub geom_pos: *mut mjtNum,
    pub geom_quat: *mut mjtNum,
    pub geom_friction: *mut mjtNum,
    pub geom_margin: *mut mjtNum,
    pub geom_gap: *mut mjtNum,
    pub geom_fluid: *mut mjtNum,
    pub geom_user: *mut mjtNum,
    pub geom_rgba: *mut f32,
    pub site_type: *mut ::std::os::raw::c_int,
    pub site_bodyid: *mut ::std::os::raw::c_int,
    pub site_matid: *mut ::std::os::raw::c_int,
    pub site_group: *mut ::std::os::raw::c_int,
    pub site_sameframe: *mut mjtByte,
    pub site_size: *mut mjtNum,
    pub site_pos: *mut mjtNum,
    pub site_quat: *mut mjtNum,
    pub site_user: *mut mjtNum,
    pub site_rgba: *mut f32,
    pub cam_mode: *mut ::std::os::raw::c_int,
    pub cam_bodyid: *mut ::std::os::raw::c_int,
    pub cam_targetbodyid: *mut ::std::os::raw::c_int,
    pub cam_pos: *mut mjtNum,
    pub cam_quat: *mut mjtNum,
    pub cam_poscom0: *mut mjtNum,
    pub cam_pos0: *mut mjtNum,
    pub cam_mat0: *mut mjtNum,
    pub cam_fovy: *mut mjtNum,
    pub cam_ipd: *mut mjtNum,
    pub cam_user: *mut mjtNum,
    pub light_mode: *mut ::std::os::raw::c_int,
    pub light_bodyid: *mut ::std::os::raw::c_int,
    pub light_targetbodyid: *mut ::std::os::raw::c_int,
    pub light_directional: *mut mjtByte,
    pub light_castshadow: *mut mjtByte,
    pub light_active: *mut mjtByte,
    pub light_pos: *mut mjtNum,
    pub light_dir: *mut mjtNum,
    pub light_poscom0: *mut mjtNum,
    pub light_pos0: *mut mjtNum,
    pub light_dir0: *mut mjtNum,
    pub light_attenuation: *mut f32,
    pub light_cutoff: *mut f32,
    pub light_exponent: *mut f32,
    pub light_ambient: *mut f32,
    pub light_diffuse: *mut f32,
    pub light_specular: *mut f32,
    pub mesh_vertadr: *mut ::std::os::raw::c_int,
    pub mesh_vertnum: *mut ::std::os::raw::c_int,
    pub mesh_texcoordadr: *mut ::std::os::raw::c_int,
    pub mesh_faceadr: *mut ::std::os::raw::c_int,
    pub mesh_facenum: *mut ::std::os::raw::c_int,
    pub mesh_graphadr: *mut ::std::os::raw::c_int,
    pub mesh_vert: *mut f32,
    pub mesh_normal: *mut f32,
    pub mesh_texcoord: *mut f32,
    pub mesh_face: *mut ::std::os::raw::c_int,
    pub mesh_graph: *mut ::std::os::raw::c_int,
    pub skin_matid: *mut ::std::os::raw::c_int,
    pub skin_group: *mut ::std::os::raw::c_int,
    pub skin_rgba: *mut f32,
    pub skin_inflate: *mut f32,
    pub skin_vertadr: *mut ::std::os::raw::c_int,
    pub skin_vertnum: *mut ::std::os::raw::c_int,
    pub skin_texcoordadr: *mut ::std::os::raw::c_int,
    pub skin_faceadr: *mut ::std::os::raw::c_int,
    pub skin_facenum: *mut ::std::os::raw::c_int,
    pub skin_boneadr: *mut ::std::os::raw::c_int,
    pub skin_bonenum: *mut ::std::os::raw::c_int,
    pub skin_vert: *mut f32,
    pub skin_texcoord: *mut f32,
    pub skin_face: *mut ::std::os::raw::c_int,
    pub skin_bonevertadr: *mut ::std::os::raw::c_int,
    pub skin_bonevertnum: *mut ::std::os::raw::c_int,
    pub skin_bonebindpos: *mut f32,
    pub skin_bonebindquat: *mut f32,
    pub skin_bonebodyid: *mut ::std::os::raw::c_int,
    pub skin_bonevertid: *mut ::std::os::raw::c_int,
    pub skin_bonevertweight: *mut f32,
    pub hfield_size: *mut mjtNum,
    pub hfield_nrow: *mut ::std::os::raw::c_int,
    pub hfield_ncol: *mut ::std::os::raw::c_int,
    pub hfield_adr: *mut ::std::os::raw::c_int,
    pub hfield_data: *mut f32,
    pub tex_type: *mut ::std::os::raw::c_int,
    pub tex_height: *mut ::std::os::raw::c_int,
    pub tex_width: *mut ::std::os::raw::c_int,
    pub tex_adr: *mut ::std::os::raw::c_int,
    pub tex_rgb: *mut mjtByte,
    pub mat_texid: *mut ::std::os::raw::c_int,
    pub mat_texuniform: *mut mjtByte,
    pub mat_texrepeat: *mut f32,
    pub mat_emission: *mut f32,
    pub mat_specular: *mut f32,
    pub mat_shininess: *mut f32,
    pub mat_reflectance: *mut f32,
    pub mat_rgba: *mut f32,
    pub pair_dim: *mut ::std::os::raw::c_int,
    pub pair_geom1: *mut ::std::os::raw::c_int,
    pub pair_geom2: *mut ::std::os::raw::c_int,
    pub pair_signature: *mut ::std::os::raw::c_int,
    pub pair_solref: *mut mjtNum,
    pub pair_solimp: *mut mjtNum,
    pub pair_margin: *mut mjtNum,
    pub pair_gap: *mut mjtNum,
    pub pair_friction: *mut mjtNum,
    pub exclude_signature: *mut ::std::os::raw::c_int,
    pub eq_type: *mut ::std::os::raw::c_int,
    pub eq_obj1id: *mut ::std::os::raw::c_int,
    pub eq_obj2id: *mut ::std::os::raw::c_int,
    pub eq_active: *mut mjtByte,
    pub eq_solref: *mut mjtNum,
    pub eq_solimp: *mut mjtNum,
    pub eq_data: *mut mjtNum,
    pub tendon_adr: *mut ::std::os::raw::c_int,
    pub tendon_num: *mut ::std::os::raw::c_int,
    pub tendon_matid: *mut ::std::os::raw::c_int,
    pub tendon_group: *mut ::std::os::raw::c_int,
    pub tendon_limited: *mut mjtByte,
    pub tendon_width: *mut mjtNum,
    pub tendon_solref_lim: *mut mjtNum,
    pub tendon_solimp_lim: *mut mjtNum,
    pub tendon_solref_fri: *mut mjtNum,
    pub tendon_solimp_fri: *mut mjtNum,
    pub tendon_range: *mut mjtNum,
    pub tendon_margin: *mut mjtNum,
    pub tendon_stiffness: *mut mjtNum,
    pub tendon_damping: *mut mjtNum,
    pub tendon_frictionloss: *mut mjtNum,
    pub tendon_lengthspring: *mut mjtNum,
    pub tendon_length0: *mut mjtNum,
    pub tendon_invweight0: *mut mjtNum,
    pub tendon_user: *mut mjtNum,
    pub tendon_rgba: *mut f32,
    pub wrap_type: *mut ::std::os::raw::c_int,
    pub wrap_objid: *mut ::std::os::raw::c_int,
    pub wrap_prm: *mut mjtNum,
    pub actuator_trntype: *mut ::std::os::raw::c_int,
    pub actuator_dyntype: *mut ::std::os::raw::c_int,
    pub actuator_gaintype: *mut ::std::os::raw::c_int,
    pub actuator_biastype: *mut ::std::os::raw::c_int,
    pub actuator_trnid: *mut ::std::os::raw::c_int,
    pub actuator_group: *mut ::std::os::raw::c_int,
    pub actuator_ctrllimited: *mut mjtByte,
    pub actuator_forcelimited: *mut mjtByte,
    pub actuator_actlimited: *mut mjtByte,
    pub actuator_dynprm: *mut mjtNum,
    pub actuator_gainprm: *mut mjtNum,
    pub actuator_biasprm: *mut mjtNum,
    pub actuator_ctrlrange: *mut mjtNum,
    pub actuator_forcerange: *mut mjtNum,
    pub actuator_actrange: *mut mjtNum,
    pub actuator_gear: *mut mjtNum,
    pub actuator_cranklength: *mut mjtNum,
    pub actuator_acc0: *mut mjtNum,
    pub actuator_length0: *mut mjtNum,
    pub actuator_lengthrange: *mut mjtNum,
    pub actuator_user: *mut mjtNum,
    pub actuator_plugin: *mut ::std::os::raw::c_int,
    pub sensor_type: *mut ::std::os::raw::c_int,
    pub sensor_datatype: *mut ::std::os::raw::c_int,
    pub sensor_needstage: *mut ::std::os::raw::c_int,
    pub sensor_objtype: *mut ::std::os::raw::c_int,
    pub sensor_objid: *mut ::std::os::raw::c_int,
    pub sensor_reftype: *mut ::std::os::raw::c_int,
    pub sensor_refid: *mut ::std::os::raw::c_int,
    pub sensor_dim: *mut ::std::os::raw::c_int,
    pub sensor_adr: *mut ::std::os::raw::c_int,
    pub sensor_cutoff: *mut mjtNum,
    pub sensor_noise: *mut mjtNum,
    pub sensor_user: *mut mjtNum,
    pub sensor_plugin: *mut ::std::os::raw::c_int,
    pub plugin: *mut ::std::os::raw::c_int,
    pub plugin_stateadr: *mut ::std::os::raw::c_int,
    pub plugin_attr: *mut ::std::os::raw::c_char,
    pub plugin_attradr: *mut ::std::os::raw::c_int,
    pub numeric_adr: *mut ::std::os::raw::c_int,
    pub numeric_size: *mut ::std::os::raw::c_int,
    pub numeric_data: *mut mjtNum,
    pub text_adr: *mut ::std::os::raw::c_int,
    pub text_size: *mut ::std::os::raw::c_int,
    pub text_data: *mut ::std::os::raw::c_char,
    pub tuple_adr: *mut ::std::os::raw::c_int,
    pub tuple_size: *mut ::std::os::raw::c_int,
    pub tuple_objtype: *mut ::std::os::raw::c_int,
    pub tuple_objid: *mut ::std::os::raw::c_int,
    pub tuple_objprm: *mut mjtNum,
    pub key_time: *mut mjtNum,
    pub key_qpos: *mut mjtNum,
    pub key_qvel: *mut mjtNum,
    pub key_act: *mut mjtNum,
    pub key_mpos: *mut mjtNum,
    pub key_mquat: *mut mjtNum,
    pub key_ctrl: *mut mjtNum,
    pub name_bodyadr: *mut ::std::os::raw::c_int,
    pub name_jntadr: *mut ::std::os::raw::c_int,
    pub name_geomadr: *mut ::std::os::raw::c_int,
    pub name_siteadr: *mut ::std::os::raw::c_int,
    pub name_camadr: *mut ::std::os::raw::c_int,
    pub name_lightadr: *mut ::std::os::raw::c_int,
    pub name_meshadr: *mut ::std::os::raw::c_int,
    pub name_skinadr: *mut ::std::os::raw::c_int,
    pub name_hfieldadr: *mut ::std::os::raw::c_int,
    pub name_texadr: *mut ::std::os::raw::c_int,
    pub name_matadr: *mut ::std::os::raw::c_int,
    pub name_pairadr: *mut ::std::os::raw::c_int,
    pub name_excludeadr: *mut ::std::os::raw::c_int,
    pub name_eqadr: *mut ::std::os::raw::c_int,
    pub name_tendonadr: *mut ::std::os::raw::c_int,
    pub name_actuatoradr: *mut ::std::os::raw::c_int,
    pub name_sensoradr: *mut ::std::os::raw::c_int,
    pub name_numericadr: *mut ::std::os::raw::c_int,
    pub name_textadr: *mut ::std::os::raw::c_int,
    pub name_tupleadr: *mut ::std::os::raw::c_int,
    pub name_keyadr: *mut ::std::os::raw::c_int,
    pub name_pluginadr: *mut ::std::os::raw::c_int,
    pub names: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mjModel_() {
    assert_eq!(
        ::std::mem::size_of::<mjModel_>(),
        3352usize,
        concat!("Size of: ", stringify!(mjModel_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjModel_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjModel_))
    );
    fn test_field_nq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nq) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nq)
            )
        );
    }
    test_field_nq();
    fn test_field_nv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nv) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nv)
            )
        );
    }
    test_field_nv();
    fn test_field_nu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nu) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nu)
            )
        );
    }
    test_field_nu();
    fn test_field_na() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).na) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(na)
            )
        );
    }
    test_field_na();
    fn test_field_nbody() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nbody) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nbody)
            )
        );
    }
    test_field_nbody();
    fn test_field_njnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).njnt) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(njnt)
            )
        );
    }
    test_field_njnt();
    fn test_field_ngeom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ngeom) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ngeom)
            )
        );
    }
    test_field_ngeom();
    fn test_field_nsite() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsite) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nsite)
            )
        );
    }
    test_field_nsite();
    fn test_field_ncam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ncam) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ncam)
            )
        );
    }
    test_field_ncam();
    fn test_field_nlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nlight) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nlight)
            )
        );
    }
    test_field_nlight();
    fn test_field_nmesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmesh) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmesh)
            )
        );
    }
    test_field_nmesh();
    fn test_field_nmeshvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmeshvert) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmeshvert)
            )
        );
    }
    test_field_nmeshvert();
    fn test_field_nmeshtexvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmeshtexvert) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmeshtexvert)
            )
        );
    }
    test_field_nmeshtexvert();
    fn test_field_nmeshface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmeshface) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmeshface)
            )
        );
    }
    test_field_nmeshface();
    fn test_field_nmeshgraph() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmeshgraph) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmeshgraph)
            )
        );
    }
    test_field_nmeshgraph();
    fn test_field_nskin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskin) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskin)
            )
        );
    }
    test_field_nskin();
    fn test_field_nskinvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskinvert) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskinvert)
            )
        );
    }
    test_field_nskinvert();
    fn test_field_nskintexvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskintexvert) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskintexvert)
            )
        );
    }
    test_field_nskintexvert();
    fn test_field_nskinface() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskinface) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskinface)
            )
        );
    }
    test_field_nskinface();
    fn test_field_nskinbone() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskinbone) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskinbone)
            )
        );
    }
    test_field_nskinbone();
    fn test_field_nskinbonevert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskinbonevert) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nskinbonevert)
            )
        );
    }
    test_field_nskinbonevert();
    fn test_field_nhfield() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nhfield) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nhfield)
            )
        );
    }
    test_field_nhfield();
    fn test_field_nhfielddata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nhfielddata) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nhfielddata)
            )
        );
    }
    test_field_nhfielddata();
    fn test_field_ntex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntex) as usize - ptr as usize
            },
            92usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntex)
            )
        );
    }
    test_field_ntex();
    fn test_field_ntexdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntexdata) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntexdata)
            )
        );
    }
    test_field_ntexdata();
    fn test_field_nmat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmat) as usize - ptr as usize
            },
            100usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmat)
            )
        );
    }
    test_field_nmat();
    fn test_field_npair() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).npair) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(npair)
            )
        );
    }
    test_field_npair();
    fn test_field_nexclude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nexclude) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nexclude)
            )
        );
    }
    test_field_nexclude();
    fn test_field_neq() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).neq) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(neq)
            )
        );
    }
    test_field_neq();
    fn test_field_ntendon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntendon) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntendon)
            )
        );
    }
    test_field_ntendon();
    fn test_field_nwrap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nwrap) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nwrap)
            )
        );
    }
    test_field_nwrap();
    fn test_field_nsensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsensor) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nsensor)
            )
        );
    }
    test_field_nsensor();
    fn test_field_nnumeric() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nnumeric) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nnumeric)
            )
        );
    }
    test_field_nnumeric();
    fn test_field_nnumericdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nnumericdata) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nnumericdata)
            )
        );
    }
    test_field_nnumericdata();
    fn test_field_ntext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntext) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntext)
            )
        );
    }
    test_field_ntext();
    fn test_field_ntextdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntextdata) as usize - ptr as usize
            },
            140usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntextdata)
            )
        );
    }
    test_field_ntextdata();
    fn test_field_ntuple() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntuple) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntuple)
            )
        );
    }
    test_field_ntuple();
    fn test_field_ntupledata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntupledata) as usize - ptr as usize
            },
            148usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(ntupledata)
            )
        );
    }
    test_field_ntupledata();
    fn test_field_nkey() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nkey) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nkey)
            )
        );
    }
    test_field_nkey();
    fn test_field_nmocap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nmocap) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nmocap)
            )
        );
    }
    test_field_nmocap();
    fn test_field_nplugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nplugin) as usize - ptr as usize
            },
            160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nplugin)
            )
        );
    }
    test_field_nplugin();
    fn test_field_npluginattr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).npluginattr) as usize - ptr as usize
            },
            164usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(npluginattr)
            )
        );
    }
    test_field_npluginattr();
    fn test_field_nuser_body() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_body) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_body)
            )
        );
    }
    test_field_nuser_body();
    fn test_field_nuser_jnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_jnt) as usize - ptr as usize
            },
            172usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_jnt)
            )
        );
    }
    test_field_nuser_jnt();
    fn test_field_nuser_geom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_geom) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_geom)
            )
        );
    }
    test_field_nuser_geom();
    fn test_field_nuser_site() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_site) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_site)
            )
        );
    }
    test_field_nuser_site();
    fn test_field_nuser_cam() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_cam) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_cam)
            )
        );
    }
    test_field_nuser_cam();
    fn test_field_nuser_tendon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_tendon) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_tendon)
            )
        );
    }
    test_field_nuser_tendon();
    fn test_field_nuser_actuator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_actuator) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_actuator)
            )
        );
    }
    test_field_nuser_actuator();
    fn test_field_nuser_sensor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuser_sensor) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuser_sensor)
            )
        );
    }
    test_field_nuser_sensor();
    fn test_field_nnames() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nnames) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nnames)
            )
        );
    }
    test_field_nnames();
    fn test_field_nM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nM) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nM)
            )
        );
    }
    test_field_nM();
    fn test_field_nD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nD) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nD)
            )
        );
    }
    test_field_nD();
    fn test_field_nemax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nemax) as usize - ptr as usize
            },
            212usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nemax)
            )
        );
    }
    test_field_nemax();
    fn test_field_njmax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).njmax) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(njmax)
            )
        );
    }
    test_field_njmax();
    fn test_field_nconmax() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nconmax) as usize - ptr as usize
            },
            220usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nconmax)
            )
        );
    }
    test_field_nconmax();
    fn test_field_nstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nstack) as usize - ptr as usize
            },
            224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nstack)
            )
        );
    }
    test_field_nstack();
    fn test_field_nuserdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nuserdata) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nuserdata)
            )
        );
    }
    test_field_nuserdata();
    fn test_field_nsensordata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsensordata) as usize - ptr as usize
            },
            232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nsensordata)
            )
        );
    }
    test_field_nsensordata();
    fn test_field_npluginstate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).npluginstate) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(npluginstate)
            )
        );
    }
    test_field_npluginstate();
    fn test_field_nbuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nbuffer) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(nbuffer)
            )
        );
    }
    test_field_nbuffer();
    fn test_field_opt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).opt) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(opt)
            )
        );
    }
    test_field_opt();
    fn test_field_vis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).vis) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(vis)
            )
        );
    }
    test_field_vis();
    fn test_field_stat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stat) as usize - ptr as usize
            },
            1048usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(stat)
            )
        );
    }
    test_field_stat();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            1104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_qpos0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qpos0) as usize - ptr as usize
            },
            1112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(qpos0)
            )
        );
    }
    test_field_qpos0();
    fn test_field_qpos_spring() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qpos_spring) as usize - ptr as usize
            },
            1120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(qpos_spring)
            )
        );
    }
    test_field_qpos_spring();
    fn test_field_body_parentid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_parentid) as usize - ptr as usize
            },
            1128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_parentid)
            )
        );
    }
    test_field_body_parentid();
    fn test_field_body_rootid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_rootid) as usize - ptr as usize
            },
            1136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_rootid)
            )
        );
    }
    test_field_body_rootid();
    fn test_field_body_weldid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_weldid) as usize - ptr as usize
            },
            1144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_weldid)
            )
        );
    }
    test_field_body_weldid();
    fn test_field_body_mocapid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_mocapid) as usize - ptr as usize
            },
            1152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_mocapid)
            )
        );
    }
    test_field_body_mocapid();
    fn test_field_body_jntnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_jntnum) as usize - ptr as usize
            },
            1160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_jntnum)
            )
        );
    }
    test_field_body_jntnum();
    fn test_field_body_jntadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_jntadr) as usize - ptr as usize
            },
            1168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_jntadr)
            )
        );
    }
    test_field_body_jntadr();
    fn test_field_body_dofnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_dofnum) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_dofnum)
            )
        );
    }
    test_field_body_dofnum();
    fn test_field_body_dofadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_dofadr) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_dofadr)
            )
        );
    }
    test_field_body_dofadr();
    fn test_field_body_geomnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_geomnum) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_geomnum)
            )
        );
    }
    test_field_body_geomnum();
    fn test_field_body_geomadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_geomadr) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_geomadr)
            )
        );
    }
    test_field_body_geomadr();
    fn test_field_body_simple() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_simple) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_simple)
            )
        );
    }
    test_field_body_simple();
    fn test_field_body_sameframe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_sameframe) as usize - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_sameframe)
            )
        );
    }
    test_field_body_sameframe();
    fn test_field_body_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_pos) as usize - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_pos)
            )
        );
    }
    test_field_body_pos();
    fn test_field_body_quat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_quat) as usize - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_quat)
            )
        );
    }
    test_field_body_quat();
    fn test_field_body_ipos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_ipos) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_ipos)
            )
        );
    }
    test_field_body_ipos();
    fn test_field_body_iquat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_iquat) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_iquat)
            )
        );
    }
    test_field_body_iquat();
    fn test_field_body_mass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_mass) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_mass)
            )
        );
    }
    test_field_body_mass();
    fn test_field_body_subtreemass() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_subtreemass) as usize - ptr as usize
            },
            1264usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_subtreemass)
            )
        );
    }
    test_field_body_subtreemass();
    fn test_field_body_inertia() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_inertia) as usize - ptr as usize
            },
            1272usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_inertia)
            )
        );
    }
    test_field_body_inertia();
    fn test_field_body_invweight0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_invweight0) as usize - ptr as usize
            },
            1280usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_invweight0)
            )
        );
    }
    test_field_body_invweight0();
    fn test_field_body_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).body_user) as usize - ptr as usize
            },
            1288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(body_user)
            )
        );
    }
    test_field_body_user();
    fn test_field_jnt_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_type) as usize - ptr as usize
            },
            1296usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_type)
            )
        );
    }
    test_field_jnt_type();
    fn test_field_jnt_qposadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_qposadr) as usize - ptr as usize
            },
            1304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_qposadr)
            )
        );
    }
    test_field_jnt_qposadr();
    fn test_field_jnt_dofadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_dofadr) as usize - ptr as usize
            },
            1312usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_dofadr)
            )
        );
    }
    test_field_jnt_dofadr();
    fn test_field_jnt_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_bodyid) as usize - ptr as usize
            },
            1320usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_bodyid)
            )
        );
    }
    test_field_jnt_bodyid();
    fn test_field_jnt_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_group) as usize - ptr as usize
            },
            1328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_group)
            )
        );
    }
    test_field_jnt_group();
    fn test_field_jnt_limited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_limited) as usize - ptr as usize
            },
            1336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_limited)
            )
        );
    }
    test_field_jnt_limited();
    fn test_field_jnt_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_solref) as usize - ptr as usize
            },
            1344usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_solref)
            )
        );
    }
    test_field_jnt_solref();
    fn test_field_jnt_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_solimp) as usize - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_solimp)
            )
        );
    }
    test_field_jnt_solimp();
    fn test_field_jnt_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_pos) as usize - ptr as usize
            },
            1360usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_pos)
            )
        );
    }
    test_field_jnt_pos();
    fn test_field_jnt_axis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_axis) as usize - ptr as usize
            },
            1368usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_axis)
            )
        );
    }
    test_field_jnt_axis();
    fn test_field_jnt_stiffness() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_stiffness) as usize - ptr as usize
            },
            1376usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_stiffness)
            )
        );
    }
    test_field_jnt_stiffness();
    fn test_field_jnt_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_range) as usize - ptr as usize
            },
            1384usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_range)
            )
        );
    }
    test_field_jnt_range();
    fn test_field_jnt_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_margin) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_margin)
            )
        );
    }
    test_field_jnt_margin();
    fn test_field_jnt_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jnt_user) as usize - ptr as usize
            },
            1400usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(jnt_user)
            )
        );
    }
    test_field_jnt_user();
    fn test_field_dof_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_bodyid) as usize - ptr as usize
            },
            1408usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_bodyid)
            )
        );
    }
    test_field_dof_bodyid();
    fn test_field_dof_jntid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_jntid) as usize - ptr as usize
            },
            1416usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_jntid)
            )
        );
    }
    test_field_dof_jntid();
    fn test_field_dof_parentid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_parentid) as usize - ptr as usize
            },
            1424usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_parentid)
            )
        );
    }
    test_field_dof_parentid();
    fn test_field_dof_Madr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_Madr) as usize - ptr as usize
            },
            1432usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_Madr)
            )
        );
    }
    test_field_dof_Madr();
    fn test_field_dof_simplenum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_simplenum) as usize - ptr as usize
            },
            1440usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_simplenum)
            )
        );
    }
    test_field_dof_simplenum();
    fn test_field_dof_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_solref) as usize - ptr as usize
            },
            1448usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_solref)
            )
        );
    }
    test_field_dof_solref();
    fn test_field_dof_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_solimp) as usize - ptr as usize
            },
            1456usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_solimp)
            )
        );
    }
    test_field_dof_solimp();
    fn test_field_dof_frictionloss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_frictionloss) as usize - ptr as usize
            },
            1464usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_frictionloss)
            )
        );
    }
    test_field_dof_frictionloss();
    fn test_field_dof_armature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_armature) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_armature)
            )
        );
    }
    test_field_dof_armature();
    fn test_field_dof_damping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_damping) as usize - ptr as usize
            },
            1480usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_damping)
            )
        );
    }
    test_field_dof_damping();
    fn test_field_dof_invweight0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_invweight0) as usize - ptr as usize
            },
            1488usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_invweight0)
            )
        );
    }
    test_field_dof_invweight0();
    fn test_field_dof_M0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dof_M0) as usize - ptr as usize
            },
            1496usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(dof_M0)
            )
        );
    }
    test_field_dof_M0();
    fn test_field_geom_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_type) as usize - ptr as usize
            },
            1504usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_type)
            )
        );
    }
    test_field_geom_type();
    fn test_field_geom_contype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_contype) as usize - ptr as usize
            },
            1512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_contype)
            )
        );
    }
    test_field_geom_contype();
    fn test_field_geom_conaffinity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_conaffinity) as usize - ptr as usize
            },
            1520usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_conaffinity)
            )
        );
    }
    test_field_geom_conaffinity();
    fn test_field_geom_condim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_condim) as usize - ptr as usize
            },
            1528usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_condim)
            )
        );
    }
    test_field_geom_condim();
    fn test_field_geom_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_bodyid) as usize - ptr as usize
            },
            1536usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_bodyid)
            )
        );
    }
    test_field_geom_bodyid();
    fn test_field_geom_dataid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_dataid) as usize - ptr as usize
            },
            1544usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_dataid)
            )
        );
    }
    test_field_geom_dataid();
    fn test_field_geom_matid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_matid) as usize - ptr as usize
            },
            1552usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_matid)
            )
        );
    }
    test_field_geom_matid();
    fn test_field_geom_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_group) as usize - ptr as usize
            },
            1560usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_group)
            )
        );
    }
    test_field_geom_group();
    fn test_field_geom_priority() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_priority) as usize - ptr as usize
            },
            1568usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_priority)
            )
        );
    }
    test_field_geom_priority();
    fn test_field_geom_sameframe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_sameframe) as usize - ptr as usize
            },
            1576usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_sameframe)
            )
        );
    }
    test_field_geom_sameframe();
    fn test_field_geom_solmix() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_solmix) as usize - ptr as usize
            },
            1584usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_solmix)
            )
        );
    }
    test_field_geom_solmix();
    fn test_field_geom_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_solref) as usize - ptr as usize
            },
            1592usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_solref)
            )
        );
    }
    test_field_geom_solref();
    fn test_field_geom_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_solimp) as usize - ptr as usize
            },
            1600usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_solimp)
            )
        );
    }
    test_field_geom_solimp();
    fn test_field_geom_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_size) as usize - ptr as usize
            },
            1608usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_size)
            )
        );
    }
    test_field_geom_size();
    fn test_field_geom_rbound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_rbound) as usize - ptr as usize
            },
            1616usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_rbound)
            )
        );
    }
    test_field_geom_rbound();
    fn test_field_geom_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_pos) as usize - ptr as usize
            },
            1624usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_pos)
            )
        );
    }
    test_field_geom_pos();
    fn test_field_geom_quat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_quat) as usize - ptr as usize
            },
            1632usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_quat)
            )
        );
    }
    test_field_geom_quat();
    fn test_field_geom_friction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_friction) as usize - ptr as usize
            },
            1640usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_friction)
            )
        );
    }
    test_field_geom_friction();
    fn test_field_geom_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_margin) as usize - ptr as usize
            },
            1648usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_margin)
            )
        );
    }
    test_field_geom_margin();
    fn test_field_geom_gap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_gap) as usize - ptr as usize
            },
            1656usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_gap)
            )
        );
    }
    test_field_geom_gap();
    fn test_field_geom_fluid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_fluid) as usize - ptr as usize
            },
            1664usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_fluid)
            )
        );
    }
    test_field_geom_fluid();
    fn test_field_geom_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_user) as usize - ptr as usize
            },
            1672usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_user)
            )
        );
    }
    test_field_geom_user();
    fn test_field_geom_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_rgba) as usize - ptr as usize
            },
            1680usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(geom_rgba)
            )
        );
    }
    test_field_geom_rgba();
    fn test_field_site_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_type) as usize - ptr as usize
            },
            1688usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_type)
            )
        );
    }
    test_field_site_type();
    fn test_field_site_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_bodyid) as usize - ptr as usize
            },
            1696usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_bodyid)
            )
        );
    }
    test_field_site_bodyid();
    fn test_field_site_matid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_matid) as usize - ptr as usize
            },
            1704usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_matid)
            )
        );
    }
    test_field_site_matid();
    fn test_field_site_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_group) as usize - ptr as usize
            },
            1712usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_group)
            )
        );
    }
    test_field_site_group();
    fn test_field_site_sameframe() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_sameframe) as usize - ptr as usize
            },
            1720usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_sameframe)
            )
        );
    }
    test_field_site_sameframe();
    fn test_field_site_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_size) as usize - ptr as usize
            },
            1728usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_size)
            )
        );
    }
    test_field_site_size();
    fn test_field_site_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_pos) as usize - ptr as usize
            },
            1736usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_pos)
            )
        );
    }
    test_field_site_pos();
    fn test_field_site_quat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_quat) as usize - ptr as usize
            },
            1744usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_quat)
            )
        );
    }
    test_field_site_quat();
    fn test_field_site_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_user) as usize - ptr as usize
            },
            1752usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_user)
            )
        );
    }
    test_field_site_user();
    fn test_field_site_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_rgba) as usize - ptr as usize
            },
            1760usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(site_rgba)
            )
        );
    }
    test_field_site_rgba();
    fn test_field_cam_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_mode) as usize - ptr as usize
            },
            1768usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_mode)
            )
        );
    }
    test_field_cam_mode();
    fn test_field_cam_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_bodyid) as usize - ptr as usize
            },
            1776usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_bodyid)
            )
        );
    }
    test_field_cam_bodyid();
    fn test_field_cam_targetbodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_targetbodyid) as usize - ptr as usize
            },
            1784usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_targetbodyid)
            )
        );
    }
    test_field_cam_targetbodyid();
    fn test_field_cam_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_pos) as usize - ptr as usize
            },
            1792usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_pos)
            )
        );
    }
    test_field_cam_pos();
    fn test_field_cam_quat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_quat) as usize - ptr as usize
            },
            1800usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_quat)
            )
        );
    }
    test_field_cam_quat();
    fn test_field_cam_poscom0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_poscom0) as usize - ptr as usize
            },
            1808usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_poscom0)
            )
        );
    }
    test_field_cam_poscom0();
    fn test_field_cam_pos0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_pos0) as usize - ptr as usize
            },
            1816usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_pos0)
            )
        );
    }
    test_field_cam_pos0();
    fn test_field_cam_mat0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_mat0) as usize - ptr as usize
            },
            1824usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_mat0)
            )
        );
    }
    test_field_cam_mat0();
    fn test_field_cam_fovy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_fovy) as usize - ptr as usize
            },
            1832usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_fovy)
            )
        );
    }
    test_field_cam_fovy();
    fn test_field_cam_ipd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_ipd) as usize - ptr as usize
            },
            1840usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_ipd)
            )
        );
    }
    test_field_cam_ipd();
    fn test_field_cam_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_user) as usize - ptr as usize
            },
            1848usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(cam_user)
            )
        );
    }
    test_field_cam_user();
    fn test_field_light_mode() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_mode) as usize - ptr as usize
            },
            1856usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_mode)
            )
        );
    }
    test_field_light_mode();
    fn test_field_light_bodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_bodyid) as usize - ptr as usize
            },
            1864usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_bodyid)
            )
        );
    }
    test_field_light_bodyid();
    fn test_field_light_targetbodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_targetbodyid) as usize - ptr as usize
            },
            1872usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_targetbodyid)
            )
        );
    }
    test_field_light_targetbodyid();
    fn test_field_light_directional() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_directional) as usize - ptr as usize
            },
            1880usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_directional)
            )
        );
    }
    test_field_light_directional();
    fn test_field_light_castshadow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_castshadow) as usize - ptr as usize
            },
            1888usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_castshadow)
            )
        );
    }
    test_field_light_castshadow();
    fn test_field_light_active() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_active) as usize - ptr as usize
            },
            1896usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_active)
            )
        );
    }
    test_field_light_active();
    fn test_field_light_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_pos) as usize - ptr as usize
            },
            1904usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_pos)
            )
        );
    }
    test_field_light_pos();
    fn test_field_light_dir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_dir) as usize - ptr as usize
            },
            1912usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_dir)
            )
        );
    }
    test_field_light_dir();
    fn test_field_light_poscom0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_poscom0) as usize - ptr as usize
            },
            1920usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_poscom0)
            )
        );
    }
    test_field_light_poscom0();
    fn test_field_light_pos0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_pos0) as usize - ptr as usize
            },
            1928usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_pos0)
            )
        );
    }
    test_field_light_pos0();
    fn test_field_light_dir0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_dir0) as usize - ptr as usize
            },
            1936usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_dir0)
            )
        );
    }
    test_field_light_dir0();
    fn test_field_light_attenuation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_attenuation) as usize - ptr as usize
            },
            1944usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_attenuation)
            )
        );
    }
    test_field_light_attenuation();
    fn test_field_light_cutoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_cutoff) as usize - ptr as usize
            },
            1952usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_cutoff)
            )
        );
    }
    test_field_light_cutoff();
    fn test_field_light_exponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_exponent) as usize - ptr as usize
            },
            1960usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_exponent)
            )
        );
    }
    test_field_light_exponent();
    fn test_field_light_ambient() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_ambient) as usize - ptr as usize
            },
            1968usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_ambient)
            )
        );
    }
    test_field_light_ambient();
    fn test_field_light_diffuse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_diffuse) as usize - ptr as usize
            },
            1976usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_diffuse)
            )
        );
    }
    test_field_light_diffuse();
    fn test_field_light_specular() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_specular) as usize - ptr as usize
            },
            1984usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(light_specular)
            )
        );
    }
    test_field_light_specular();
    fn test_field_mesh_vertadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_vertadr) as usize - ptr as usize
            },
            1992usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_vertadr)
            )
        );
    }
    test_field_mesh_vertadr();
    fn test_field_mesh_vertnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_vertnum) as usize - ptr as usize
            },
            2000usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_vertnum)
            )
        );
    }
    test_field_mesh_vertnum();
    fn test_field_mesh_texcoordadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_texcoordadr) as usize - ptr as usize
            },
            2008usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_texcoordadr)
            )
        );
    }
    test_field_mesh_texcoordadr();
    fn test_field_mesh_faceadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_faceadr) as usize - ptr as usize
            },
            2016usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_faceadr)
            )
        );
    }
    test_field_mesh_faceadr();
    fn test_field_mesh_facenum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_facenum) as usize - ptr as usize
            },
            2024usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_facenum)
            )
        );
    }
    test_field_mesh_facenum();
    fn test_field_mesh_graphadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_graphadr) as usize - ptr as usize
            },
            2032usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_graphadr)
            )
        );
    }
    test_field_mesh_graphadr();
    fn test_field_mesh_vert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_vert) as usize - ptr as usize
            },
            2040usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_vert)
            )
        );
    }
    test_field_mesh_vert();
    fn test_field_mesh_normal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_normal) as usize - ptr as usize
            },
            2048usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_normal)
            )
        );
    }
    test_field_mesh_normal();
    fn test_field_mesh_texcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_texcoord) as usize - ptr as usize
            },
            2056usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_texcoord)
            )
        );
    }
    test_field_mesh_texcoord();
    fn test_field_mesh_face() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_face) as usize - ptr as usize
            },
            2064usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_face)
            )
        );
    }
    test_field_mesh_face();
    fn test_field_mesh_graph() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mesh_graph) as usize - ptr as usize
            },
            2072usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mesh_graph)
            )
        );
    }
    test_field_mesh_graph();
    fn test_field_skin_matid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_matid) as usize - ptr as usize
            },
            2080usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_matid)
            )
        );
    }
    test_field_skin_matid();
    fn test_field_skin_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_group) as usize - ptr as usize
            },
            2088usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_group)
            )
        );
    }
    test_field_skin_group();
    fn test_field_skin_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_rgba) as usize - ptr as usize
            },
            2096usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_rgba)
            )
        );
    }
    test_field_skin_rgba();
    fn test_field_skin_inflate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_inflate) as usize - ptr as usize
            },
            2104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_inflate)
            )
        );
    }
    test_field_skin_inflate();
    fn test_field_skin_vertadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_vertadr) as usize - ptr as usize
            },
            2112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_vertadr)
            )
        );
    }
    test_field_skin_vertadr();
    fn test_field_skin_vertnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_vertnum) as usize - ptr as usize
            },
            2120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_vertnum)
            )
        );
    }
    test_field_skin_vertnum();
    fn test_field_skin_texcoordadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_texcoordadr) as usize - ptr as usize
            },
            2128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_texcoordadr)
            )
        );
    }
    test_field_skin_texcoordadr();
    fn test_field_skin_faceadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_faceadr) as usize - ptr as usize
            },
            2136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_faceadr)
            )
        );
    }
    test_field_skin_faceadr();
    fn test_field_skin_facenum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_facenum) as usize - ptr as usize
            },
            2144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_facenum)
            )
        );
    }
    test_field_skin_facenum();
    fn test_field_skin_boneadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_boneadr) as usize - ptr as usize
            },
            2152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_boneadr)
            )
        );
    }
    test_field_skin_boneadr();
    fn test_field_skin_bonenum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonenum) as usize - ptr as usize
            },
            2160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonenum)
            )
        );
    }
    test_field_skin_bonenum();
    fn test_field_skin_vert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_vert) as usize - ptr as usize
            },
            2168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_vert)
            )
        );
    }
    test_field_skin_vert();
    fn test_field_skin_texcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_texcoord) as usize - ptr as usize
            },
            2176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_texcoord)
            )
        );
    }
    test_field_skin_texcoord();
    fn test_field_skin_face() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_face) as usize - ptr as usize
            },
            2184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_face)
            )
        );
    }
    test_field_skin_face();
    fn test_field_skin_bonevertadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonevertadr) as usize - ptr as usize
            },
            2192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonevertadr)
            )
        );
    }
    test_field_skin_bonevertadr();
    fn test_field_skin_bonevertnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonevertnum) as usize - ptr as usize
            },
            2200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonevertnum)
            )
        );
    }
    test_field_skin_bonevertnum();
    fn test_field_skin_bonebindpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonebindpos) as usize - ptr as usize
            },
            2208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonebindpos)
            )
        );
    }
    test_field_skin_bonebindpos();
    fn test_field_skin_bonebindquat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonebindquat) as usize - ptr as usize
            },
            2216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonebindquat)
            )
        );
    }
    test_field_skin_bonebindquat();
    fn test_field_skin_bonebodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonebodyid) as usize - ptr as usize
            },
            2224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonebodyid)
            )
        );
    }
    test_field_skin_bonebodyid();
    fn test_field_skin_bonevertid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonevertid) as usize - ptr as usize
            },
            2232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonevertid)
            )
        );
    }
    test_field_skin_bonevertid();
    fn test_field_skin_bonevertweight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skin_bonevertweight) as usize - ptr as usize
            },
            2240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(skin_bonevertweight)
            )
        );
    }
    test_field_skin_bonevertweight();
    fn test_field_hfield_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hfield_size) as usize - ptr as usize
            },
            2248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(hfield_size)
            )
        );
    }
    test_field_hfield_size();
    fn test_field_hfield_nrow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hfield_nrow) as usize - ptr as usize
            },
            2256usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(hfield_nrow)
            )
        );
    }
    test_field_hfield_nrow();
    fn test_field_hfield_ncol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hfield_ncol) as usize - ptr as usize
            },
            2264usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(hfield_ncol)
            )
        );
    }
    test_field_hfield_ncol();
    fn test_field_hfield_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hfield_adr) as usize - ptr as usize
            },
            2272usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(hfield_adr)
            )
        );
    }
    test_field_hfield_adr();
    fn test_field_hfield_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).hfield_data) as usize - ptr as usize
            },
            2280usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(hfield_data)
            )
        );
    }
    test_field_hfield_data();
    fn test_field_tex_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex_type) as usize - ptr as usize
            },
            2288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tex_type)
            )
        );
    }
    test_field_tex_type();
    fn test_field_tex_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex_height) as usize - ptr as usize
            },
            2296usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tex_height)
            )
        );
    }
    test_field_tex_height();
    fn test_field_tex_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex_width) as usize - ptr as usize
            },
            2304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tex_width)
            )
        );
    }
    test_field_tex_width();
    fn test_field_tex_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex_adr) as usize - ptr as usize
            },
            2312usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tex_adr)
            )
        );
    }
    test_field_tex_adr();
    fn test_field_tex_rgb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tex_rgb) as usize - ptr as usize
            },
            2320usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tex_rgb)
            )
        );
    }
    test_field_tex_rgb();
    fn test_field_mat_texid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_texid) as usize - ptr as usize
            },
            2328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_texid)
            )
        );
    }
    test_field_mat_texid();
    fn test_field_mat_texuniform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_texuniform) as usize - ptr as usize
            },
            2336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_texuniform)
            )
        );
    }
    test_field_mat_texuniform();
    fn test_field_mat_texrepeat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_texrepeat) as usize - ptr as usize
            },
            2344usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_texrepeat)
            )
        );
    }
    test_field_mat_texrepeat();
    fn test_field_mat_emission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_emission) as usize - ptr as usize
            },
            2352usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_emission)
            )
        );
    }
    test_field_mat_emission();
    fn test_field_mat_specular() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_specular) as usize - ptr as usize
            },
            2360usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_specular)
            )
        );
    }
    test_field_mat_specular();
    fn test_field_mat_shininess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_shininess) as usize - ptr as usize
            },
            2368usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_shininess)
            )
        );
    }
    test_field_mat_shininess();
    fn test_field_mat_reflectance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_reflectance) as usize - ptr as usize
            },
            2376usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_reflectance)
            )
        );
    }
    test_field_mat_reflectance();
    fn test_field_mat_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat_rgba) as usize - ptr as usize
            },
            2384usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(mat_rgba)
            )
        );
    }
    test_field_mat_rgba();
    fn test_field_pair_dim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_dim) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_dim)
            )
        );
    }
    test_field_pair_dim();
    fn test_field_pair_geom1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_geom1) as usize - ptr as usize
            },
            2400usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_geom1)
            )
        );
    }
    test_field_pair_geom1();
    fn test_field_pair_geom2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_geom2) as usize - ptr as usize
            },
            2408usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_geom2)
            )
        );
    }
    test_field_pair_geom2();
    fn test_field_pair_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_signature) as usize - ptr as usize
            },
            2416usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_signature)
            )
        );
    }
    test_field_pair_signature();
    fn test_field_pair_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_solref) as usize - ptr as usize
            },
            2424usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_solref)
            )
        );
    }
    test_field_pair_solref();
    fn test_field_pair_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_solimp) as usize - ptr as usize
            },
            2432usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_solimp)
            )
        );
    }
    test_field_pair_solimp();
    fn test_field_pair_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_margin) as usize - ptr as usize
            },
            2440usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_margin)
            )
        );
    }
    test_field_pair_margin();
    fn test_field_pair_gap() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_gap) as usize - ptr as usize
            },
            2448usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_gap)
            )
        );
    }
    test_field_pair_gap();
    fn test_field_pair_friction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pair_friction) as usize - ptr as usize
            },
            2456usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(pair_friction)
            )
        );
    }
    test_field_pair_friction();
    fn test_field_exclude_signature() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exclude_signature) as usize - ptr as usize
            },
            2464usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(exclude_signature)
            )
        );
    }
    test_field_exclude_signature();
    fn test_field_eq_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_type) as usize - ptr as usize
            },
            2472usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_type)
            )
        );
    }
    test_field_eq_type();
    fn test_field_eq_obj1id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_obj1id) as usize - ptr as usize
            },
            2480usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_obj1id)
            )
        );
    }
    test_field_eq_obj1id();
    fn test_field_eq_obj2id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_obj2id) as usize - ptr as usize
            },
            2488usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_obj2id)
            )
        );
    }
    test_field_eq_obj2id();
    fn test_field_eq_active() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_active) as usize - ptr as usize
            },
            2496usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_active)
            )
        );
    }
    test_field_eq_active();
    fn test_field_eq_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_solref) as usize - ptr as usize
            },
            2504usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_solref)
            )
        );
    }
    test_field_eq_solref();
    fn test_field_eq_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_solimp) as usize - ptr as usize
            },
            2512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_solimp)
            )
        );
    }
    test_field_eq_solimp();
    fn test_field_eq_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).eq_data) as usize - ptr as usize
            },
            2520usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(eq_data)
            )
        );
    }
    test_field_eq_data();
    fn test_field_tendon_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_adr) as usize - ptr as usize
            },
            2528usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_adr)
            )
        );
    }
    test_field_tendon_adr();
    fn test_field_tendon_num() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_num) as usize - ptr as usize
            },
            2536usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_num)
            )
        );
    }
    test_field_tendon_num();
    fn test_field_tendon_matid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_matid) as usize - ptr as usize
            },
            2544usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_matid)
            )
        );
    }
    test_field_tendon_matid();
    fn test_field_tendon_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_group) as usize - ptr as usize
            },
            2552usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_group)
            )
        );
    }
    test_field_tendon_group();
    fn test_field_tendon_limited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_limited) as usize - ptr as usize
            },
            2560usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_limited)
            )
        );
    }
    test_field_tendon_limited();
    fn test_field_tendon_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_width) as usize - ptr as usize
            },
            2568usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_width)
            )
        );
    }
    test_field_tendon_width();
    fn test_field_tendon_solref_lim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_solref_lim) as usize - ptr as usize
            },
            2576usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_solref_lim)
            )
        );
    }
    test_field_tendon_solref_lim();
    fn test_field_tendon_solimp_lim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_solimp_lim) as usize - ptr as usize
            },
            2584usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_solimp_lim)
            )
        );
    }
    test_field_tendon_solimp_lim();
    fn test_field_tendon_solref_fri() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_solref_fri) as usize - ptr as usize
            },
            2592usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_solref_fri)
            )
        );
    }
    test_field_tendon_solref_fri();
    fn test_field_tendon_solimp_fri() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_solimp_fri) as usize - ptr as usize
            },
            2600usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_solimp_fri)
            )
        );
    }
    test_field_tendon_solimp_fri();
    fn test_field_tendon_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_range) as usize - ptr as usize
            },
            2608usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_range)
            )
        );
    }
    test_field_tendon_range();
    fn test_field_tendon_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_margin) as usize - ptr as usize
            },
            2616usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_margin)
            )
        );
    }
    test_field_tendon_margin();
    fn test_field_tendon_stiffness() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_stiffness) as usize - ptr as usize
            },
            2624usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_stiffness)
            )
        );
    }
    test_field_tendon_stiffness();
    fn test_field_tendon_damping() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_damping) as usize - ptr as usize
            },
            2632usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_damping)
            )
        );
    }
    test_field_tendon_damping();
    fn test_field_tendon_frictionloss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_frictionloss) as usize - ptr as usize
            },
            2640usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_frictionloss)
            )
        );
    }
    test_field_tendon_frictionloss();
    fn test_field_tendon_lengthspring() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_lengthspring) as usize - ptr as usize
            },
            2648usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_lengthspring)
            )
        );
    }
    test_field_tendon_lengthspring();
    fn test_field_tendon_length0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_length0) as usize - ptr as usize
            },
            2656usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_length0)
            )
        );
    }
    test_field_tendon_length0();
    fn test_field_tendon_invweight0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_invweight0) as usize - ptr as usize
            },
            2664usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_invweight0)
            )
        );
    }
    test_field_tendon_invweight0();
    fn test_field_tendon_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_user) as usize - ptr as usize
            },
            2672usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_user)
            )
        );
    }
    test_field_tendon_user();
    fn test_field_tendon_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendon_rgba) as usize - ptr as usize
            },
            2680usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tendon_rgba)
            )
        );
    }
    test_field_tendon_rgba();
    fn test_field_wrap_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_type) as usize - ptr as usize
            },
            2688usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(wrap_type)
            )
        );
    }
    test_field_wrap_type();
    fn test_field_wrap_objid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_objid) as usize - ptr as usize
            },
            2696usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(wrap_objid)
            )
        );
    }
    test_field_wrap_objid();
    fn test_field_wrap_prm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_prm) as usize - ptr as usize
            },
            2704usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(wrap_prm)
            )
        );
    }
    test_field_wrap_prm();
    fn test_field_actuator_trntype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_trntype) as usize - ptr as usize
            },
            2712usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_trntype)
            )
        );
    }
    test_field_actuator_trntype();
    fn test_field_actuator_dyntype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_dyntype) as usize - ptr as usize
            },
            2720usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_dyntype)
            )
        );
    }
    test_field_actuator_dyntype();
    fn test_field_actuator_gaintype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_gaintype) as usize - ptr as usize
            },
            2728usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_gaintype)
            )
        );
    }
    test_field_actuator_gaintype();
    fn test_field_actuator_biastype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_biastype) as usize - ptr as usize
            },
            2736usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_biastype)
            )
        );
    }
    test_field_actuator_biastype();
    fn test_field_actuator_trnid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_trnid) as usize - ptr as usize
            },
            2744usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_trnid)
            )
        );
    }
    test_field_actuator_trnid();
    fn test_field_actuator_group() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_group) as usize - ptr as usize
            },
            2752usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_group)
            )
        );
    }
    test_field_actuator_group();
    fn test_field_actuator_ctrllimited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_ctrllimited) as usize
                    - ptr as usize
            },
            2760usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_ctrllimited)
            )
        );
    }
    test_field_actuator_ctrllimited();
    fn test_field_actuator_forcelimited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_forcelimited) as usize
                    - ptr as usize
            },
            2768usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_forcelimited)
            )
        );
    }
    test_field_actuator_forcelimited();
    fn test_field_actuator_actlimited() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_actlimited) as usize - ptr as usize
            },
            2776usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_actlimited)
            )
        );
    }
    test_field_actuator_actlimited();
    fn test_field_actuator_dynprm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_dynprm) as usize - ptr as usize
            },
            2784usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_dynprm)
            )
        );
    }
    test_field_actuator_dynprm();
    fn test_field_actuator_gainprm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_gainprm) as usize - ptr as usize
            },
            2792usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_gainprm)
            )
        );
    }
    test_field_actuator_gainprm();
    fn test_field_actuator_biasprm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_biasprm) as usize - ptr as usize
            },
            2800usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_biasprm)
            )
        );
    }
    test_field_actuator_biasprm();
    fn test_field_actuator_ctrlrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_ctrlrange) as usize - ptr as usize
            },
            2808usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_ctrlrange)
            )
        );
    }
    test_field_actuator_ctrlrange();
    fn test_field_actuator_forcerange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_forcerange) as usize - ptr as usize
            },
            2816usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_forcerange)
            )
        );
    }
    test_field_actuator_forcerange();
    fn test_field_actuator_actrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_actrange) as usize - ptr as usize
            },
            2824usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_actrange)
            )
        );
    }
    test_field_actuator_actrange();
    fn test_field_actuator_gear() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_gear) as usize - ptr as usize
            },
            2832usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_gear)
            )
        );
    }
    test_field_actuator_gear();
    fn test_field_actuator_cranklength() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_cranklength) as usize
                    - ptr as usize
            },
            2840usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_cranklength)
            )
        );
    }
    test_field_actuator_cranklength();
    fn test_field_actuator_acc0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_acc0) as usize - ptr as usize
            },
            2848usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_acc0)
            )
        );
    }
    test_field_actuator_acc0();
    fn test_field_actuator_length0() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_length0) as usize - ptr as usize
            },
            2856usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_length0)
            )
        );
    }
    test_field_actuator_length0();
    fn test_field_actuator_lengthrange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_lengthrange) as usize
                    - ptr as usize
            },
            2864usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_lengthrange)
            )
        );
    }
    test_field_actuator_lengthrange();
    fn test_field_actuator_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_user) as usize - ptr as usize
            },
            2872usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_user)
            )
        );
    }
    test_field_actuator_user();
    fn test_field_actuator_plugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_plugin) as usize - ptr as usize
            },
            2880usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(actuator_plugin)
            )
        );
    }
    test_field_actuator_plugin();
    fn test_field_sensor_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_type) as usize - ptr as usize
            },
            2888usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_type)
            )
        );
    }
    test_field_sensor_type();
    fn test_field_sensor_datatype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_datatype) as usize - ptr as usize
            },
            2896usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_datatype)
            )
        );
    }
    test_field_sensor_datatype();
    fn test_field_sensor_needstage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_needstage) as usize - ptr as usize
            },
            2904usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_needstage)
            )
        );
    }
    test_field_sensor_needstage();
    fn test_field_sensor_objtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_objtype) as usize - ptr as usize
            },
            2912usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_objtype)
            )
        );
    }
    test_field_sensor_objtype();
    fn test_field_sensor_objid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_objid) as usize - ptr as usize
            },
            2920usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_objid)
            )
        );
    }
    test_field_sensor_objid();
    fn test_field_sensor_reftype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_reftype) as usize - ptr as usize
            },
            2928usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_reftype)
            )
        );
    }
    test_field_sensor_reftype();
    fn test_field_sensor_refid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_refid) as usize - ptr as usize
            },
            2936usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_refid)
            )
        );
    }
    test_field_sensor_refid();
    fn test_field_sensor_dim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_dim) as usize - ptr as usize
            },
            2944usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_dim)
            )
        );
    }
    test_field_sensor_dim();
    fn test_field_sensor_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_adr) as usize - ptr as usize
            },
            2952usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_adr)
            )
        );
    }
    test_field_sensor_adr();
    fn test_field_sensor_cutoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_cutoff) as usize - ptr as usize
            },
            2960usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_cutoff)
            )
        );
    }
    test_field_sensor_cutoff();
    fn test_field_sensor_noise() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_noise) as usize - ptr as usize
            },
            2968usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_noise)
            )
        );
    }
    test_field_sensor_noise();
    fn test_field_sensor_user() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_user) as usize - ptr as usize
            },
            2976usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_user)
            )
        );
    }
    test_field_sensor_user();
    fn test_field_sensor_plugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensor_plugin) as usize - ptr as usize
            },
            2984usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(sensor_plugin)
            )
        );
    }
    test_field_sensor_plugin();
    fn test_field_plugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin) as usize - ptr as usize
            },
            2992usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(plugin)
            )
        );
    }
    test_field_plugin();
    fn test_field_plugin_stateadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin_stateadr) as usize - ptr as usize
            },
            3000usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(plugin_stateadr)
            )
        );
    }
    test_field_plugin_stateadr();
    fn test_field_plugin_attr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin_attr) as usize - ptr as usize
            },
            3008usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(plugin_attr)
            )
        );
    }
    test_field_plugin_attr();
    fn test_field_plugin_attradr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin_attradr) as usize - ptr as usize
            },
            3016usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(plugin_attradr)
            )
        );
    }
    test_field_plugin_attradr();
    fn test_field_numeric_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numeric_adr) as usize - ptr as usize
            },
            3024usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(numeric_adr)
            )
        );
    }
    test_field_numeric_adr();
    fn test_field_numeric_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numeric_size) as usize - ptr as usize
            },
            3032usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(numeric_size)
            )
        );
    }
    test_field_numeric_size();
    fn test_field_numeric_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).numeric_data) as usize - ptr as usize
            },
            3040usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(numeric_data)
            )
        );
    }
    test_field_numeric_data();
    fn test_field_text_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text_adr) as usize - ptr as usize
            },
            3048usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(text_adr)
            )
        );
    }
    test_field_text_adr();
    fn test_field_text_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text_size) as usize - ptr as usize
            },
            3056usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(text_size)
            )
        );
    }
    test_field_text_size();
    fn test_field_text_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).text_data) as usize - ptr as usize
            },
            3064usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(text_data)
            )
        );
    }
    test_field_text_data();
    fn test_field_tuple_adr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuple_adr) as usize - ptr as usize
            },
            3072usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tuple_adr)
            )
        );
    }
    test_field_tuple_adr();
    fn test_field_tuple_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuple_size) as usize - ptr as usize
            },
            3080usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tuple_size)
            )
        );
    }
    test_field_tuple_size();
    fn test_field_tuple_objtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuple_objtype) as usize - ptr as usize
            },
            3088usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tuple_objtype)
            )
        );
    }
    test_field_tuple_objtype();
    fn test_field_tuple_objid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuple_objid) as usize - ptr as usize
            },
            3096usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tuple_objid)
            )
        );
    }
    test_field_tuple_objid();
    fn test_field_tuple_objprm() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tuple_objprm) as usize - ptr as usize
            },
            3104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(tuple_objprm)
            )
        );
    }
    test_field_tuple_objprm();
    fn test_field_key_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_time) as usize - ptr as usize
            },
            3112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_time)
            )
        );
    }
    test_field_key_time();
    fn test_field_key_qpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_qpos) as usize - ptr as usize
            },
            3120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_qpos)
            )
        );
    }
    test_field_key_qpos();
    fn test_field_key_qvel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_qvel) as usize - ptr as usize
            },
            3128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_qvel)
            )
        );
    }
    test_field_key_qvel();
    fn test_field_key_act() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_act) as usize - ptr as usize
            },
            3136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_act)
            )
        );
    }
    test_field_key_act();
    fn test_field_key_mpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_mpos) as usize - ptr as usize
            },
            3144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_mpos)
            )
        );
    }
    test_field_key_mpos();
    fn test_field_key_mquat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_mquat) as usize - ptr as usize
            },
            3152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_mquat)
            )
        );
    }
    test_field_key_mquat();
    fn test_field_key_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key_ctrl) as usize - ptr as usize
            },
            3160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(key_ctrl)
            )
        );
    }
    test_field_key_ctrl();
    fn test_field_name_bodyadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_bodyadr) as usize - ptr as usize
            },
            3168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_bodyadr)
            )
        );
    }
    test_field_name_bodyadr();
    fn test_field_name_jntadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_jntadr) as usize - ptr as usize
            },
            3176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_jntadr)
            )
        );
    }
    test_field_name_jntadr();
    fn test_field_name_geomadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_geomadr) as usize - ptr as usize
            },
            3184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_geomadr)
            )
        );
    }
    test_field_name_geomadr();
    fn test_field_name_siteadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_siteadr) as usize - ptr as usize
            },
            3192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_siteadr)
            )
        );
    }
    test_field_name_siteadr();
    fn test_field_name_camadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_camadr) as usize - ptr as usize
            },
            3200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_camadr)
            )
        );
    }
    test_field_name_camadr();
    fn test_field_name_lightadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_lightadr) as usize - ptr as usize
            },
            3208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_lightadr)
            )
        );
    }
    test_field_name_lightadr();
    fn test_field_name_meshadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_meshadr) as usize - ptr as usize
            },
            3216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_meshadr)
            )
        );
    }
    test_field_name_meshadr();
    fn test_field_name_skinadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_skinadr) as usize - ptr as usize
            },
            3224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_skinadr)
            )
        );
    }
    test_field_name_skinadr();
    fn test_field_name_hfieldadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_hfieldadr) as usize - ptr as usize
            },
            3232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_hfieldadr)
            )
        );
    }
    test_field_name_hfieldadr();
    fn test_field_name_texadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_texadr) as usize - ptr as usize
            },
            3240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_texadr)
            )
        );
    }
    test_field_name_texadr();
    fn test_field_name_matadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_matadr) as usize - ptr as usize
            },
            3248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_matadr)
            )
        );
    }
    test_field_name_matadr();
    fn test_field_name_pairadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_pairadr) as usize - ptr as usize
            },
            3256usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_pairadr)
            )
        );
    }
    test_field_name_pairadr();
    fn test_field_name_excludeadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_excludeadr) as usize - ptr as usize
            },
            3264usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_excludeadr)
            )
        );
    }
    test_field_name_excludeadr();
    fn test_field_name_eqadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_eqadr) as usize - ptr as usize
            },
            3272usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_eqadr)
            )
        );
    }
    test_field_name_eqadr();
    fn test_field_name_tendonadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_tendonadr) as usize - ptr as usize
            },
            3280usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_tendonadr)
            )
        );
    }
    test_field_name_tendonadr();
    fn test_field_name_actuatoradr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_actuatoradr) as usize - ptr as usize
            },
            3288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_actuatoradr)
            )
        );
    }
    test_field_name_actuatoradr();
    fn test_field_name_sensoradr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_sensoradr) as usize - ptr as usize
            },
            3296usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_sensoradr)
            )
        );
    }
    test_field_name_sensoradr();
    fn test_field_name_numericadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_numericadr) as usize - ptr as usize
            },
            3304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_numericadr)
            )
        );
    }
    test_field_name_numericadr();
    fn test_field_name_textadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_textadr) as usize - ptr as usize
            },
            3312usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_textadr)
            )
        );
    }
    test_field_name_textadr();
    fn test_field_name_tupleadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_tupleadr) as usize - ptr as usize
            },
            3320usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_tupleadr)
            )
        );
    }
    test_field_name_tupleadr();
    fn test_field_name_keyadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_keyadr) as usize - ptr as usize
            },
            3328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_keyadr)
            )
        );
    }
    test_field_name_keyadr();
    fn test_field_name_pluginadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name_pluginadr) as usize - ptr as usize
            },
            3336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(name_pluginadr)
            )
        );
    }
    test_field_name_pluginadr();
    fn test_field_names() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjModel_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).names) as usize - ptr as usize
            },
            3344usize,
            concat!(
                "Offset of field: ",
                stringify!(mjModel_),
                "::",
                stringify!(names)
            )
        );
    }
    test_field_names();
}
impl Default for mjModel_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjModel = mjModel_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtWarning_ {
    INERTIA = 0,
    CONTACTFULL = 1,
    CNSTRFULL = 2,
    VGEOMFULL = 3,
    BADQPOS = 4,
    BADQVEL = 5,
    BADQACC = 6,
    BADCTRL = 7,
    mjNWARNING = 8,
}
pub use self::mjtWarning_ as mjtWarning;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtTimer_ {
    STEP = 0,
    FORWARD = 1,
    INVERSE = 2,
    POSITION = 3,
    VELOCITY = 4,
    ACTUATION = 5,
    ACCELERATION = 6,
    CONSTRAINT = 7,
    POS_KINEMATICS = 8,
    POS_INERTIA = 9,
    POS_COLLISION = 10,
    POS_MAKE = 11,
    POS_PROJECT = 12,
    mjNTIMER = 13,
}
pub use self::mjtTimer_ as mjtTimer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjContact_ {
    pub dist: mjtNum,
    pub pos: [mjtNum; 3usize],
    pub frame: [mjtNum; 9usize],
    pub includemargin: mjtNum,
    pub friction: [mjtNum; 5usize],
    pub solref: [mjtNum; 2usize],
    pub solimp: [mjtNum; 5usize],
    pub mu: mjtNum,
    pub H: [mjtNum; 36usize],
    pub dim: ::std::os::raw::c_int,
    pub geom1: ::std::os::raw::c_int,
    pub geom2: ::std::os::raw::c_int,
    pub exclude: ::std::os::raw::c_int,
    pub efc_address: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjContact_() {
    assert_eq!(
        ::std::mem::size_of::<mjContact_>(),
        528usize,
        concat!("Size of: ", stringify!(mjContact_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjContact_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjContact_))
    );
    fn test_field_dist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dist) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(dist)
            )
        );
    }
    test_field_dist();
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
    fn test_field_includemargin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).includemargin) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(includemargin)
            )
        );
    }
    test_field_includemargin();
    fn test_field_friction() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).friction) as usize - ptr as usize
            },
            112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(friction)
            )
        );
    }
    test_field_friction();
    fn test_field_solref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solref) as usize - ptr as usize
            },
            152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(solref)
            )
        );
    }
    test_field_solref();
    fn test_field_solimp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solimp) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(solimp)
            )
        );
    }
    test_field_solimp();
    fn test_field_mu() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mu) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(mu)
            )
        );
    }
    test_field_mu();
    fn test_field_H() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).H) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(H)
            )
        );
    }
    test_field_H();
    fn test_field_dim() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dim) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(dim)
            )
        );
    }
    test_field_dim();
    fn test_field_geom1() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom1) as usize - ptr as usize
            },
            508usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(geom1)
            )
        );
    }
    test_field_geom1();
    fn test_field_geom2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom2) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(geom2)
            )
        );
    }
    test_field_geom2();
    fn test_field_exclude() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exclude) as usize - ptr as usize
            },
            516usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(exclude)
            )
        );
    }
    test_field_exclude();
    fn test_field_efc_address() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjContact_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_address) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(mjContact_),
                "::",
                stringify!(efc_address)
            )
        );
    }
    test_field_efc_address();
}
impl Default for mjContact_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjContact = mjContact_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjWarningStat_ {
    pub lastinfo: ::std::os::raw::c_int,
    pub number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjWarningStat_() {
    assert_eq!(
        ::std::mem::size_of::<mjWarningStat_>(),
        8usize,
        concat!("Size of: ", stringify!(mjWarningStat_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjWarningStat_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjWarningStat_))
    );
    fn test_field_lastinfo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjWarningStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lastinfo) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjWarningStat_),
                "::",
                stringify!(lastinfo)
            )
        );
    }
    test_field_lastinfo();
    fn test_field_number() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjWarningStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjWarningStat_),
                "::",
                stringify!(number)
            )
        );
    }
    test_field_number();
}
pub type mjWarningStat = mjWarningStat_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjTimerStat_ {
    pub duration: mjtNum,
    pub number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjTimerStat_() {
    assert_eq!(
        ::std::mem::size_of::<mjTimerStat_>(),
        16usize,
        concat!("Size of: ", stringify!(mjTimerStat_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjTimerStat_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjTimerStat_))
    );
    fn test_field_duration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjTimerStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjTimerStat_),
                "::",
                stringify!(duration)
            )
        );
    }
    test_field_duration();
    fn test_field_number() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjTimerStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).number) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjTimerStat_),
                "::",
                stringify!(number)
            )
        );
    }
    test_field_number();
}
pub type mjTimerStat = mjTimerStat_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjSolverStat_ {
    pub improvement: mjtNum,
    pub gradient: mjtNum,
    pub lineslope: mjtNum,
    pub nactive: ::std::os::raw::c_int,
    pub nchange: ::std::os::raw::c_int,
    pub neval: ::std::os::raw::c_int,
    pub nupdate: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjSolverStat_() {
    assert_eq!(
        ::std::mem::size_of::<mjSolverStat_>(),
        40usize,
        concat!("Size of: ", stringify!(mjSolverStat_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjSolverStat_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjSolverStat_))
    );
    fn test_field_improvement() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).improvement) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(improvement)
            )
        );
    }
    test_field_improvement();
    fn test_field_gradient() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gradient) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(gradient)
            )
        );
    }
    test_field_gradient();
    fn test_field_lineslope() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lineslope) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(lineslope)
            )
        );
    }
    test_field_lineslope();
    fn test_field_nactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nactive) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(nactive)
            )
        );
    }
    test_field_nactive();
    fn test_field_nchange() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nchange) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(nchange)
            )
        );
    }
    test_field_nchange();
    fn test_field_neval() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).neval) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(neval)
            )
        );
    }
    test_field_neval();
    fn test_field_nupdate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjSolverStat_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nupdate) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjSolverStat_),
                "::",
                stringify!(nupdate)
            )
        );
    }
    test_field_nupdate();
}
pub type mjSolverStat = mjSolverStat_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjData_ {
    pub nstack: ::std::os::raw::c_int,
    pub nbuffer: ::std::os::raw::c_int,
    pub nplugin: ::std::os::raw::c_int,
    pub pstack: ::std::os::raw::c_int,
    pub maxuse_stack: ::std::os::raw::c_int,
    pub maxuse_con: ::std::os::raw::c_int,
    pub maxuse_efc: ::std::os::raw::c_int,
    pub warning: [mjWarningStat; 8usize],
    pub timer: [mjTimerStat; 13usize],
    pub solver: [mjSolverStat; 1000usize],
    pub solver_iter: ::std::os::raw::c_int,
    pub solver_nnz: ::std::os::raw::c_int,
    pub solver_fwdinv: [mjtNum; 2usize],
    pub ne: ::std::os::raw::c_int,
    pub nf: ::std::os::raw::c_int,
    pub nefc: ::std::os::raw::c_int,
    pub ncon: ::std::os::raw::c_int,
    pub time: mjtNum,
    pub energy: [mjtNum; 2usize],
    pub buffer: *mut ::std::os::raw::c_void,
    pub stack: *mut mjtNum,
    pub qpos: *mut mjtNum,
    pub qvel: *mut mjtNum,
    pub act: *mut mjtNum,
    pub qacc_warmstart: *mut mjtNum,
    pub plugin_state: *mut mjtNum,
    pub ctrl: *mut mjtNum,
    pub qfrc_applied: *mut mjtNum,
    pub xfrc_applied: *mut mjtNum,
    pub mocap_pos: *mut mjtNum,
    pub mocap_quat: *mut mjtNum,
    pub qacc: *mut mjtNum,
    pub act_dot: *mut mjtNum,
    pub userdata: *mut mjtNum,
    pub sensordata: *mut mjtNum,
    pub plugin: *mut ::std::os::raw::c_int,
    pub plugin_data: *mut usize,
    pub xpos: *mut mjtNum,
    pub xquat: *mut mjtNum,
    pub xmat: *mut mjtNum,
    pub xipos: *mut mjtNum,
    pub ximat: *mut mjtNum,
    pub xanchor: *mut mjtNum,
    pub xaxis: *mut mjtNum,
    pub geom_xpos: *mut mjtNum,
    pub geom_xmat: *mut mjtNum,
    pub site_xpos: *mut mjtNum,
    pub site_xmat: *mut mjtNum,
    pub cam_xpos: *mut mjtNum,
    pub cam_xmat: *mut mjtNum,
    pub light_xpos: *mut mjtNum,
    pub light_xdir: *mut mjtNum,
    pub subtree_com: *mut mjtNum,
    pub cdof: *mut mjtNum,
    pub cinert: *mut mjtNum,
    pub ten_wrapadr: *mut ::std::os::raw::c_int,
    pub ten_wrapnum: *mut ::std::os::raw::c_int,
    pub ten_J_rownnz: *mut ::std::os::raw::c_int,
    pub ten_J_rowadr: *mut ::std::os::raw::c_int,
    pub ten_J_colind: *mut ::std::os::raw::c_int,
    pub ten_length: *mut mjtNum,
    pub ten_J: *mut mjtNum,
    pub wrap_obj: *mut ::std::os::raw::c_int,
    pub wrap_xpos: *mut mjtNum,
    pub actuator_length: *mut mjtNum,
    pub actuator_moment: *mut mjtNum,
    pub crb: *mut mjtNum,
    pub qM: *mut mjtNum,
    pub qLD: *mut mjtNum,
    pub qLDiagInv: *mut mjtNum,
    pub qLDiagSqrtInv: *mut mjtNum,
    pub contact: *mut mjContact,
    pub efc_type: *mut ::std::os::raw::c_int,
    pub efc_id: *mut ::std::os::raw::c_int,
    pub efc_J_rownnz: *mut ::std::os::raw::c_int,
    pub efc_J_rowadr: *mut ::std::os::raw::c_int,
    pub efc_J_rowsuper: *mut ::std::os::raw::c_int,
    pub efc_J_colind: *mut ::std::os::raw::c_int,
    pub efc_JT_rownnz: *mut ::std::os::raw::c_int,
    pub efc_JT_rowadr: *mut ::std::os::raw::c_int,
    pub efc_JT_rowsuper: *mut ::std::os::raw::c_int,
    pub efc_JT_colind: *mut ::std::os::raw::c_int,
    pub efc_J: *mut mjtNum,
    pub efc_JT: *mut mjtNum,
    pub efc_pos: *mut mjtNum,
    pub efc_margin: *mut mjtNum,
    pub efc_frictionloss: *mut mjtNum,
    pub efc_diagApprox: *mut mjtNum,
    pub efc_KBIP: *mut mjtNum,
    pub efc_D: *mut mjtNum,
    pub efc_R: *mut mjtNum,
    pub efc_AR_rownnz: *mut ::std::os::raw::c_int,
    pub efc_AR_rowadr: *mut ::std::os::raw::c_int,
    pub efc_AR_colind: *mut ::std::os::raw::c_int,
    pub efc_AR: *mut mjtNum,
    pub ten_velocity: *mut mjtNum,
    pub actuator_velocity: *mut mjtNum,
    pub cvel: *mut mjtNum,
    pub cdof_dot: *mut mjtNum,
    pub qfrc_bias: *mut mjtNum,
    pub qfrc_passive: *mut mjtNum,
    pub efc_vel: *mut mjtNum,
    pub efc_aref: *mut mjtNum,
    pub subtree_linvel: *mut mjtNum,
    pub subtree_angmom: *mut mjtNum,
    pub qH: *mut mjtNum,
    pub qHDiagInv: *mut mjtNum,
    pub D_rownnz: *mut ::std::os::raw::c_int,
    pub D_rowadr: *mut ::std::os::raw::c_int,
    pub D_colind: *mut ::std::os::raw::c_int,
    pub qDeriv: *mut mjtNum,
    pub qLU: *mut mjtNum,
    pub actuator_force: *mut mjtNum,
    pub qfrc_actuator: *mut mjtNum,
    pub qfrc_smooth: *mut mjtNum,
    pub qacc_smooth: *mut mjtNum,
    pub efc_b: *mut mjtNum,
    pub efc_force: *mut mjtNum,
    pub efc_state: *mut ::std::os::raw::c_int,
    pub qfrc_constraint: *mut mjtNum,
    pub qfrc_inverse: *mut mjtNum,
    pub cacc: *mut mjtNum,
    pub cfrc_int: *mut mjtNum,
    pub cfrc_ext: *mut mjtNum,
}
#[test]
fn bindgen_test_layout_mjData_() {
    assert_eq!(
        ::std::mem::size_of::<mjData_>(),
        41208usize,
        concat!("Size of: ", stringify!(mjData_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjData_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjData_))
    );
    fn test_field_nstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nstack) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(nstack)
            )
        );
    }
    test_field_nstack();
    fn test_field_nbuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nbuffer) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(nbuffer)
            )
        );
    }
    test_field_nbuffer();
    fn test_field_nplugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nplugin) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(nplugin)
            )
        );
    }
    test_field_nplugin();
    fn test_field_pstack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pstack) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(pstack)
            )
        );
    }
    test_field_pstack();
    fn test_field_maxuse_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxuse_stack) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(maxuse_stack)
            )
        );
    }
    test_field_maxuse_stack();
    fn test_field_maxuse_con() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxuse_con) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(maxuse_con)
            )
        );
    }
    test_field_maxuse_con();
    fn test_field_maxuse_efc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxuse_efc) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(maxuse_efc)
            )
        );
    }
    test_field_maxuse_efc();
    fn test_field_warning() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).warning) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(warning)
            )
        );
    }
    test_field_warning();
    fn test_field_timer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).timer) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(timer)
            )
        );
    }
    test_field_timer();
    fn test_field_solver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(solver)
            )
        );
    }
    test_field_solver();
    fn test_field_solver_iter() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver_iter) as usize - ptr as usize
            },
            40304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(solver_iter)
            )
        );
    }
    test_field_solver_iter();
    fn test_field_solver_nnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver_nnz) as usize - ptr as usize
            },
            40308usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(solver_nnz)
            )
        );
    }
    test_field_solver_nnz();
    fn test_field_solver_fwdinv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).solver_fwdinv) as usize - ptr as usize
            },
            40312usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(solver_fwdinv)
            )
        );
    }
    test_field_solver_fwdinv();
    fn test_field_ne() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize
            },
            40328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ne)
            )
        );
    }
    test_field_ne();
    fn test_field_nf() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nf) as usize - ptr as usize
            },
            40332usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(nf)
            )
        );
    }
    test_field_nf();
    fn test_field_nefc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nefc) as usize - ptr as usize
            },
            40336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(nefc)
            )
        );
    }
    test_field_nefc();
    fn test_field_ncon() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ncon) as usize - ptr as usize
            },
            40340usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ncon)
            )
        );
    }
    test_field_ncon();
    fn test_field_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).time) as usize - ptr as usize
            },
            40344usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(time)
            )
        );
    }
    test_field_time();
    fn test_field_energy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).energy) as usize - ptr as usize
            },
            40352usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(energy)
            )
        );
    }
    test_field_energy();
    fn test_field_buffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize
            },
            40368usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(buffer)
            )
        );
    }
    test_field_buffer();
    fn test_field_stack() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stack) as usize - ptr as usize
            },
            40376usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(stack)
            )
        );
    }
    test_field_stack();
    fn test_field_qpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qpos) as usize - ptr as usize
            },
            40384usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qpos)
            )
        );
    }
    test_field_qpos();
    fn test_field_qvel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qvel) as usize - ptr as usize
            },
            40392usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qvel)
            )
        );
    }
    test_field_qvel();
    fn test_field_act() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).act) as usize - ptr as usize
            },
            40400usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(act)
            )
        );
    }
    test_field_act();
    fn test_field_qacc_warmstart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qacc_warmstart) as usize - ptr as usize
            },
            40408usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qacc_warmstart)
            )
        );
    }
    test_field_qacc_warmstart();
    fn test_field_plugin_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin_state) as usize - ptr as usize
            },
            40416usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(plugin_state)
            )
        );
    }
    test_field_plugin_state();
    fn test_field_ctrl() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ctrl) as usize - ptr as usize
            },
            40424usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ctrl)
            )
        );
    }
    test_field_ctrl();
    fn test_field_qfrc_applied() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_applied) as usize - ptr as usize
            },
            40432usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_applied)
            )
        );
    }
    test_field_qfrc_applied();
    fn test_field_xfrc_applied() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xfrc_applied) as usize - ptr as usize
            },
            40440usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xfrc_applied)
            )
        );
    }
    test_field_xfrc_applied();
    fn test_field_mocap_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mocap_pos) as usize - ptr as usize
            },
            40448usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(mocap_pos)
            )
        );
    }
    test_field_mocap_pos();
    fn test_field_mocap_quat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mocap_quat) as usize - ptr as usize
            },
            40456usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(mocap_quat)
            )
        );
    }
    test_field_mocap_quat();
    fn test_field_qacc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qacc) as usize - ptr as usize
            },
            40464usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qacc)
            )
        );
    }
    test_field_qacc();
    fn test_field_act_dot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).act_dot) as usize - ptr as usize
            },
            40472usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(act_dot)
            )
        );
    }
    test_field_act_dot();
    fn test_field_userdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize
            },
            40480usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(userdata)
            )
        );
    }
    test_field_userdata();
    fn test_field_sensordata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sensordata) as usize - ptr as usize
            },
            40488usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(sensordata)
            )
        );
    }
    test_field_sensordata();
    fn test_field_plugin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin) as usize - ptr as usize
            },
            40496usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(plugin)
            )
        );
    }
    test_field_plugin();
    fn test_field_plugin_data() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).plugin_data) as usize - ptr as usize
            },
            40504usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(plugin_data)
            )
        );
    }
    test_field_plugin_data();
    fn test_field_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xpos) as usize - ptr as usize
            },
            40512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xpos)
            )
        );
    }
    test_field_xpos();
    fn test_field_xquat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xquat) as usize - ptr as usize
            },
            40520usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xquat)
            )
        );
    }
    test_field_xquat();
    fn test_field_xmat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xmat) as usize - ptr as usize
            },
            40528usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xmat)
            )
        );
    }
    test_field_xmat();
    fn test_field_xipos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xipos) as usize - ptr as usize
            },
            40536usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xipos)
            )
        );
    }
    test_field_xipos();
    fn test_field_ximat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ximat) as usize - ptr as usize
            },
            40544usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ximat)
            )
        );
    }
    test_field_ximat();
    fn test_field_xanchor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xanchor) as usize - ptr as usize
            },
            40552usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xanchor)
            )
        );
    }
    test_field_xanchor();
    fn test_field_xaxis() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xaxis) as usize - ptr as usize
            },
            40560usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(xaxis)
            )
        );
    }
    test_field_xaxis();
    fn test_field_geom_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_xpos) as usize - ptr as usize
            },
            40568usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(geom_xpos)
            )
        );
    }
    test_field_geom_xpos();
    fn test_field_geom_xmat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geom_xmat) as usize - ptr as usize
            },
            40576usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(geom_xmat)
            )
        );
    }
    test_field_geom_xmat();
    fn test_field_site_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_xpos) as usize - ptr as usize
            },
            40584usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(site_xpos)
            )
        );
    }
    test_field_site_xpos();
    fn test_field_site_xmat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).site_xmat) as usize - ptr as usize
            },
            40592usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(site_xmat)
            )
        );
    }
    test_field_site_xmat();
    fn test_field_cam_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_xpos) as usize - ptr as usize
            },
            40600usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cam_xpos)
            )
        );
    }
    test_field_cam_xpos();
    fn test_field_cam_xmat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cam_xmat) as usize - ptr as usize
            },
            40608usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cam_xmat)
            )
        );
    }
    test_field_cam_xmat();
    fn test_field_light_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_xpos) as usize - ptr as usize
            },
            40616usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(light_xpos)
            )
        );
    }
    test_field_light_xpos();
    fn test_field_light_xdir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).light_xdir) as usize - ptr as usize
            },
            40624usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(light_xdir)
            )
        );
    }
    test_field_light_xdir();
    fn test_field_subtree_com() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subtree_com) as usize - ptr as usize
            },
            40632usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(subtree_com)
            )
        );
    }
    test_field_subtree_com();
    fn test_field_cdof() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cdof) as usize - ptr as usize
            },
            40640usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cdof)
            )
        );
    }
    test_field_cdof();
    fn test_field_cinert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cinert) as usize - ptr as usize
            },
            40648usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cinert)
            )
        );
    }
    test_field_cinert();
    fn test_field_ten_wrapadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_wrapadr) as usize - ptr as usize
            },
            40656usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_wrapadr)
            )
        );
    }
    test_field_ten_wrapadr();
    fn test_field_ten_wrapnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_wrapnum) as usize - ptr as usize
            },
            40664usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_wrapnum)
            )
        );
    }
    test_field_ten_wrapnum();
    fn test_field_ten_J_rownnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_J_rownnz) as usize - ptr as usize
            },
            40672usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_J_rownnz)
            )
        );
    }
    test_field_ten_J_rownnz();
    fn test_field_ten_J_rowadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_J_rowadr) as usize - ptr as usize
            },
            40680usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_J_rowadr)
            )
        );
    }
    test_field_ten_J_rowadr();
    fn test_field_ten_J_colind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_J_colind) as usize - ptr as usize
            },
            40688usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_J_colind)
            )
        );
    }
    test_field_ten_J_colind();
    fn test_field_ten_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_length) as usize - ptr as usize
            },
            40696usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_length)
            )
        );
    }
    test_field_ten_length();
    fn test_field_ten_J() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_J) as usize - ptr as usize
            },
            40704usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_J)
            )
        );
    }
    test_field_ten_J();
    fn test_field_wrap_obj() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_obj) as usize - ptr as usize
            },
            40712usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(wrap_obj)
            )
        );
    }
    test_field_wrap_obj();
    fn test_field_wrap_xpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).wrap_xpos) as usize - ptr as usize
            },
            40720usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(wrap_xpos)
            )
        );
    }
    test_field_wrap_xpos();
    fn test_field_actuator_length() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_length) as usize - ptr as usize
            },
            40728usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(actuator_length)
            )
        );
    }
    test_field_actuator_length();
    fn test_field_actuator_moment() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_moment) as usize - ptr as usize
            },
            40736usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(actuator_moment)
            )
        );
    }
    test_field_actuator_moment();
    fn test_field_crb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).crb) as usize - ptr as usize
            },
            40744usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(crb)
            )
        );
    }
    test_field_crb();
    fn test_field_qM() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qM) as usize - ptr as usize
            },
            40752usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qM)
            )
        );
    }
    test_field_qM();
    fn test_field_qLD() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qLD) as usize - ptr as usize
            },
            40760usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qLD)
            )
        );
    }
    test_field_qLD();
    fn test_field_qLDiagInv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qLDiagInv) as usize - ptr as usize
            },
            40768usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qLDiagInv)
            )
        );
    }
    test_field_qLDiagInv();
    fn test_field_qLDiagSqrtInv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qLDiagSqrtInv) as usize - ptr as usize
            },
            40776usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qLDiagSqrtInv)
            )
        );
    }
    test_field_qLDiagSqrtInv();
    fn test_field_contact() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).contact) as usize - ptr as usize
            },
            40784usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(contact)
            )
        );
    }
    test_field_contact();
    fn test_field_efc_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_type) as usize - ptr as usize
            },
            40792usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_type)
            )
        );
    }
    test_field_efc_type();
    fn test_field_efc_id() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_id) as usize - ptr as usize
            },
            40800usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_id)
            )
        );
    }
    test_field_efc_id();
    fn test_field_efc_J_rownnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_J_rownnz) as usize - ptr as usize
            },
            40808usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_J_rownnz)
            )
        );
    }
    test_field_efc_J_rownnz();
    fn test_field_efc_J_rowadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_J_rowadr) as usize - ptr as usize
            },
            40816usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_J_rowadr)
            )
        );
    }
    test_field_efc_J_rowadr();
    fn test_field_efc_J_rowsuper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_J_rowsuper) as usize - ptr as usize
            },
            40824usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_J_rowsuper)
            )
        );
    }
    test_field_efc_J_rowsuper();
    fn test_field_efc_J_colind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_J_colind) as usize - ptr as usize
            },
            40832usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_J_colind)
            )
        );
    }
    test_field_efc_J_colind();
    fn test_field_efc_JT_rownnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_JT_rownnz) as usize - ptr as usize
            },
            40840usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_JT_rownnz)
            )
        );
    }
    test_field_efc_JT_rownnz();
    fn test_field_efc_JT_rowadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_JT_rowadr) as usize - ptr as usize
            },
            40848usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_JT_rowadr)
            )
        );
    }
    test_field_efc_JT_rowadr();
    fn test_field_efc_JT_rowsuper() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_JT_rowsuper) as usize - ptr as usize
            },
            40856usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_JT_rowsuper)
            )
        );
    }
    test_field_efc_JT_rowsuper();
    fn test_field_efc_JT_colind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_JT_colind) as usize - ptr as usize
            },
            40864usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_JT_colind)
            )
        );
    }
    test_field_efc_JT_colind();
    fn test_field_efc_J() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_J) as usize - ptr as usize
            },
            40872usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_J)
            )
        );
    }
    test_field_efc_J();
    fn test_field_efc_JT() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_JT) as usize - ptr as usize
            },
            40880usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_JT)
            )
        );
    }
    test_field_efc_JT();
    fn test_field_efc_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_pos) as usize - ptr as usize
            },
            40888usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_pos)
            )
        );
    }
    test_field_efc_pos();
    fn test_field_efc_margin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_margin) as usize - ptr as usize
            },
            40896usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_margin)
            )
        );
    }
    test_field_efc_margin();
    fn test_field_efc_frictionloss() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_frictionloss) as usize - ptr as usize
            },
            40904usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_frictionloss)
            )
        );
    }
    test_field_efc_frictionloss();
    fn test_field_efc_diagApprox() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_diagApprox) as usize - ptr as usize
            },
            40912usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_diagApprox)
            )
        );
    }
    test_field_efc_diagApprox();
    fn test_field_efc_KBIP() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_KBIP) as usize - ptr as usize
            },
            40920usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_KBIP)
            )
        );
    }
    test_field_efc_KBIP();
    fn test_field_efc_D() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_D) as usize - ptr as usize
            },
            40928usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_D)
            )
        );
    }
    test_field_efc_D();
    fn test_field_efc_R() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_R) as usize - ptr as usize
            },
            40936usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_R)
            )
        );
    }
    test_field_efc_R();
    fn test_field_efc_AR_rownnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_AR_rownnz) as usize - ptr as usize
            },
            40944usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_AR_rownnz)
            )
        );
    }
    test_field_efc_AR_rownnz();
    fn test_field_efc_AR_rowadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_AR_rowadr) as usize - ptr as usize
            },
            40952usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_AR_rowadr)
            )
        );
    }
    test_field_efc_AR_rowadr();
    fn test_field_efc_AR_colind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_AR_colind) as usize - ptr as usize
            },
            40960usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_AR_colind)
            )
        );
    }
    test_field_efc_AR_colind();
    fn test_field_efc_AR() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_AR) as usize - ptr as usize
            },
            40968usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_AR)
            )
        );
    }
    test_field_efc_AR();
    fn test_field_ten_velocity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ten_velocity) as usize - ptr as usize
            },
            40976usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(ten_velocity)
            )
        );
    }
    test_field_ten_velocity();
    fn test_field_actuator_velocity() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_velocity) as usize - ptr as usize
            },
            40984usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(actuator_velocity)
            )
        );
    }
    test_field_actuator_velocity();
    fn test_field_cvel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cvel) as usize - ptr as usize
            },
            40992usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cvel)
            )
        );
    }
    test_field_cvel();
    fn test_field_cdof_dot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cdof_dot) as usize - ptr as usize
            },
            41000usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cdof_dot)
            )
        );
    }
    test_field_cdof_dot();
    fn test_field_qfrc_bias() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_bias) as usize - ptr as usize
            },
            41008usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_bias)
            )
        );
    }
    test_field_qfrc_bias();
    fn test_field_qfrc_passive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_passive) as usize - ptr as usize
            },
            41016usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_passive)
            )
        );
    }
    test_field_qfrc_passive();
    fn test_field_efc_vel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_vel) as usize - ptr as usize
            },
            41024usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_vel)
            )
        );
    }
    test_field_efc_vel();
    fn test_field_efc_aref() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_aref) as usize - ptr as usize
            },
            41032usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_aref)
            )
        );
    }
    test_field_efc_aref();
    fn test_field_subtree_linvel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subtree_linvel) as usize - ptr as usize
            },
            41040usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(subtree_linvel)
            )
        );
    }
    test_field_subtree_linvel();
    fn test_field_subtree_angmom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subtree_angmom) as usize - ptr as usize
            },
            41048usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(subtree_angmom)
            )
        );
    }
    test_field_subtree_angmom();
    fn test_field_qH() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qH) as usize - ptr as usize
            },
            41056usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qH)
            )
        );
    }
    test_field_qH();
    fn test_field_qHDiagInv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qHDiagInv) as usize - ptr as usize
            },
            41064usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qHDiagInv)
            )
        );
    }
    test_field_qHDiagInv();
    fn test_field_D_rownnz() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).D_rownnz) as usize - ptr as usize
            },
            41072usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(D_rownnz)
            )
        );
    }
    test_field_D_rownnz();
    fn test_field_D_rowadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).D_rowadr) as usize - ptr as usize
            },
            41080usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(D_rowadr)
            )
        );
    }
    test_field_D_rowadr();
    fn test_field_D_colind() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).D_colind) as usize - ptr as usize
            },
            41088usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(D_colind)
            )
        );
    }
    test_field_D_colind();
    fn test_field_qDeriv() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qDeriv) as usize - ptr as usize
            },
            41096usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qDeriv)
            )
        );
    }
    test_field_qDeriv();
    fn test_field_qLU() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qLU) as usize - ptr as usize
            },
            41104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qLU)
            )
        );
    }
    test_field_qLU();
    fn test_field_actuator_force() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuator_force) as usize - ptr as usize
            },
            41112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(actuator_force)
            )
        );
    }
    test_field_actuator_force();
    fn test_field_qfrc_actuator() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_actuator) as usize - ptr as usize
            },
            41120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_actuator)
            )
        );
    }
    test_field_qfrc_actuator();
    fn test_field_qfrc_smooth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_smooth) as usize - ptr as usize
            },
            41128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_smooth)
            )
        );
    }
    test_field_qfrc_smooth();
    fn test_field_qacc_smooth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qacc_smooth) as usize - ptr as usize
            },
            41136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qacc_smooth)
            )
        );
    }
    test_field_qacc_smooth();
    fn test_field_efc_b() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_b) as usize - ptr as usize
            },
            41144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_b)
            )
        );
    }
    test_field_efc_b();
    fn test_field_efc_force() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_force) as usize - ptr as usize
            },
            41152usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_force)
            )
        );
    }
    test_field_efc_force();
    fn test_field_efc_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).efc_state) as usize - ptr as usize
            },
            41160usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(efc_state)
            )
        );
    }
    test_field_efc_state();
    fn test_field_qfrc_constraint() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_constraint) as usize - ptr as usize
            },
            41168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_constraint)
            )
        );
    }
    test_field_qfrc_constraint();
    fn test_field_qfrc_inverse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).qfrc_inverse) as usize - ptr as usize
            },
            41176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(qfrc_inverse)
            )
        );
    }
    test_field_qfrc_inverse();
    fn test_field_cacc() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cacc) as usize - ptr as usize
            },
            41184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cacc)
            )
        );
    }
    test_field_cacc();
    fn test_field_cfrc_int() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfrc_int) as usize - ptr as usize
            },
            41192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cfrc_int)
            )
        );
    }
    test_field_cfrc_int();
    fn test_field_cfrc_ext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjData_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cfrc_ext) as usize - ptr as usize
            },
            41200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjData_),
                "::",
                stringify!(cfrc_ext)
            )
        );
    }
    test_field_cfrc_ext();
}
impl Default for mjData_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjData = mjData_;
pub type mjfGeneric =
    ::std::option::Option<unsafe extern "C" fn(m: *const mjModel, d: *mut mjData)>;
pub type mjfConFilt = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *mut mjData,
        geom1: ::std::os::raw::c_int,
        geom2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type mjfSensor = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *mut mjData,
        stage: ::std::os::raw::c_int,
    ),
>;
pub type mjfTime = ::std::option::Option<unsafe extern "C" fn() -> mjtNum>;
pub type mjfAct = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *const mjData,
        id: ::std::os::raw::c_int,
    ) -> mjtNum,
>;
pub type mjfCollision = ::std::option::Option<
    unsafe extern "C" fn(
        m: *const mjModel,
        d: *const mjData,
        con: *mut mjContact,
        g1: ::std::os::raw::c_int,
        g2: ::std::os::raw::c_int,
        margin: mjtNum,
    ) -> ::std::os::raw::c_int,
>;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtPluginTypeBit_ {
    ACTUATOR = 1,
    SENSOR = 2,
}
pub use self::mjtPluginTypeBit_ as mjtPluginTypeBit;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjpPlugin_ {
    pub name: *const ::std::os::raw::c_char,
    pub nattribute: ::std::os::raw::c_int,
    pub attributes: *const *const ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub needstage: ::std::os::raw::c_int,
    pub nstate: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            instance: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub nsensordata: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            instance: ::std::os::raw::c_int,
            sensor_id: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub destroy: ::std::option::Option<
        unsafe extern "C" fn(d: *mut mjData, instance: ::std::os::raw::c_int),
    >,
    pub copy: ::std::option::Option<
        unsafe extern "C" fn(
            dest: *mut mjData,
            m: *const mjModel,
            src: *const mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub reset: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
    pub compute: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
            type_: ::std::os::raw::c_int,
        ),
    >,
    pub advance: ::std::option::Option<
        unsafe extern "C" fn(
            m: *const mjModel,
            d: *mut mjData,
            instance: ::std::os::raw::c_int,
        ),
    >,
}
#[test]
fn bindgen_test_layout_mjpPlugin_() {
    assert_eq!(
        ::std::mem::size_of::<mjpPlugin_>(),
        96usize,
        concat!("Size of: ", stringify!(mjpPlugin_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjpPlugin_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjpPlugin_))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_nattribute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nattribute) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(nattribute)
            )
        );
    }
    test_field_nattribute();
    fn test_field_attributes() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attributes) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(attributes)
            )
        );
    }
    test_field_attributes();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_needstage() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).needstage) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(needstage)
            )
        );
    }
    test_field_needstage();
    fn test_field_nstate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nstate) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(nstate)
            )
        );
    }
    test_field_nstate();
    fn test_field_nsensordata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsensordata) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(nsensordata)
            )
        );
    }
    test_field_nsensordata();
    fn test_field_init() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).init) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(init)
            )
        );
    }
    test_field_init();
    fn test_field_destroy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).destroy) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(destroy)
            )
        );
    }
    test_field_destroy();
    fn test_field_copy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).copy) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(copy)
            )
        );
    }
    test_field_copy();
    fn test_field_reset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reset) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(reset)
            )
        );
    }
    test_field_reset();
    fn test_field_compute() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).compute) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(compute)
            )
        );
    }
    test_field_compute();
    fn test_field_advance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjpPlugin_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).advance) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(mjpPlugin_),
                "::",
                stringify!(advance)
            )
        );
    }
    test_field_advance();
}
impl Default for mjpPlugin_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjpPlugin = mjpPlugin_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtGridPos_ {
    TOPLEFT = 0,
    TOPRIGHT = 1,
    BOTTOMLEFT = 2,
    BOTTOMRIGHT = 3,
}
pub use self::mjtGridPos_ as mjtGridPos;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtFramebuffer_ {
    WINDOW = 0,
    OFFSCREEN = 1,
}
pub use self::mjtFramebuffer_ as mjtFramebuffer;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtFontScale_ {
    SCALE_50 = 50,
    SCALE_100 = 100,
    SCALE_150 = 150,
    SCALE_200 = 200,
    SCALE_250 = 250,
    SCALE_300 = 300,
}
pub use self::mjtFontScale_ as mjtFontScale;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtFont_ {
    NORMAL = 0,
    SHADOW = 1,
    BIG = 2,
}
pub use self::mjtFont_ as mjtFont;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjrRect_ {
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjrRect_() {
    assert_eq!(
        ::std::mem::size_of::<mjrRect_>(),
        16usize,
        concat!("Size of: ", stringify!(mjrRect_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjrRect_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjrRect_))
    );
    fn test_field_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrRect_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrRect_),
                "::",
                stringify!(left)
            )
        );
    }
    test_field_left();
    fn test_field_bottom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrRect_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrRect_),
                "::",
                stringify!(bottom)
            )
        );
    }
    test_field_bottom();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrRect_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrRect_),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrRect_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrRect_),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
}
pub type mjrRect = mjrRect_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjrContext_ {
    pub lineWidth: f32,
    pub shadowClip: f32,
    pub shadowScale: f32,
    pub fogStart: f32,
    pub fogEnd: f32,
    pub fogRGBA: [f32; 4usize],
    pub shadowSize: ::std::os::raw::c_int,
    pub offWidth: ::std::os::raw::c_int,
    pub offHeight: ::std::os::raw::c_int,
    pub offSamples: ::std::os::raw::c_int,
    pub fontScale: ::std::os::raw::c_int,
    pub auxWidth: [::std::os::raw::c_int; 10usize],
    pub auxHeight: [::std::os::raw::c_int; 10usize],
    pub auxSamples: [::std::os::raw::c_int; 10usize],
    pub offFBO: ::std::os::raw::c_uint,
    pub offFBO_r: ::std::os::raw::c_uint,
    pub offColor: ::std::os::raw::c_uint,
    pub offColor_r: ::std::os::raw::c_uint,
    pub offDepthStencil: ::std::os::raw::c_uint,
    pub offDepthStencil_r: ::std::os::raw::c_uint,
    pub shadowFBO: ::std::os::raw::c_uint,
    pub shadowTex: ::std::os::raw::c_uint,
    pub auxFBO: [::std::os::raw::c_uint; 10usize],
    pub auxFBO_r: [::std::os::raw::c_uint; 10usize],
    pub auxColor: [::std::os::raw::c_uint; 10usize],
    pub auxColor_r: [::std::os::raw::c_uint; 10usize],
    pub ntexture: ::std::os::raw::c_int,
    pub textureType: [::std::os::raw::c_int; 100usize],
    pub texture: [::std::os::raw::c_uint; 100usize],
    pub basePlane: ::std::os::raw::c_uint,
    pub baseMesh: ::std::os::raw::c_uint,
    pub baseHField: ::std::os::raw::c_uint,
    pub baseBuiltin: ::std::os::raw::c_uint,
    pub baseFontNormal: ::std::os::raw::c_uint,
    pub baseFontShadow: ::std::os::raw::c_uint,
    pub baseFontBig: ::std::os::raw::c_uint,
    pub rangePlane: ::std::os::raw::c_int,
    pub rangeMesh: ::std::os::raw::c_int,
    pub rangeHField: ::std::os::raw::c_int,
    pub rangeBuiltin: ::std::os::raw::c_int,
    pub rangeFont: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub skinvertVBO: *mut ::std::os::raw::c_uint,
    pub skinnormalVBO: *mut ::std::os::raw::c_uint,
    pub skintexcoordVBO: *mut ::std::os::raw::c_uint,
    pub skinfaceVBO: *mut ::std::os::raw::c_uint,
    pub charWidth: [::std::os::raw::c_int; 127usize],
    pub charWidthBig: [::std::os::raw::c_int; 127usize],
    pub charHeight: ::std::os::raw::c_int,
    pub charHeightBig: ::std::os::raw::c_int,
    pub glInitialized: ::std::os::raw::c_int,
    pub windowAvailable: ::std::os::raw::c_int,
    pub windowSamples: ::std::os::raw::c_int,
    pub windowStereo: ::std::os::raw::c_int,
    pub windowDoublebuffer: ::std::os::raw::c_int,
    pub currentBuffer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjrContext_() {
    assert_eq!(
        ::std::mem::size_of::<mjrContext_>(),
        2304usize,
        concat!("Size of: ", stringify!(mjrContext_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjrContext_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjrContext_))
    );
    fn test_field_lineWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lineWidth) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(lineWidth)
            )
        );
    }
    test_field_lineWidth();
    fn test_field_shadowClip() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowClip) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(shadowClip)
            )
        );
    }
    test_field_shadowClip();
    fn test_field_shadowScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowScale) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(shadowScale)
            )
        );
    }
    test_field_shadowScale();
    fn test_field_fogStart() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fogStart) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(fogStart)
            )
        );
    }
    test_field_fogStart();
    fn test_field_fogEnd() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fogEnd) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(fogEnd)
            )
        );
    }
    test_field_fogEnd();
    fn test_field_fogRGBA() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fogRGBA) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(fogRGBA)
            )
        );
    }
    test_field_fogRGBA();
    fn test_field_shadowSize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowSize) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(shadowSize)
            )
        );
    }
    test_field_shadowSize();
    fn test_field_offWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offWidth) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offWidth)
            )
        );
    }
    test_field_offWidth();
    fn test_field_offHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offHeight) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offHeight)
            )
        );
    }
    test_field_offHeight();
    fn test_field_offSamples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offSamples) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offSamples)
            )
        );
    }
    test_field_offSamples();
    fn test_field_fontScale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fontScale) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(fontScale)
            )
        );
    }
    test_field_fontScale();
    fn test_field_auxWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxWidth) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxWidth)
            )
        );
    }
    test_field_auxWidth();
    fn test_field_auxHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxHeight) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxHeight)
            )
        );
    }
    test_field_auxHeight();
    fn test_field_auxSamples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxSamples) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxSamples)
            )
        );
    }
    test_field_auxSamples();
    fn test_field_offFBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offFBO) as usize - ptr as usize
            },
            176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offFBO)
            )
        );
    }
    test_field_offFBO();
    fn test_field_offFBO_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offFBO_r) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offFBO_r)
            )
        );
    }
    test_field_offFBO_r();
    fn test_field_offColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offColor) as usize - ptr as usize
            },
            184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offColor)
            )
        );
    }
    test_field_offColor();
    fn test_field_offColor_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offColor_r) as usize - ptr as usize
            },
            188usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offColor_r)
            )
        );
    }
    test_field_offColor_r();
    fn test_field_offDepthStencil() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offDepthStencil) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offDepthStencil)
            )
        );
    }
    test_field_offDepthStencil();
    fn test_field_offDepthStencil_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offDepthStencil_r) as usize - ptr as usize
            },
            196usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(offDepthStencil_r)
            )
        );
    }
    test_field_offDepthStencil_r();
    fn test_field_shadowFBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowFBO) as usize - ptr as usize
            },
            200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(shadowFBO)
            )
        );
    }
    test_field_shadowFBO();
    fn test_field_shadowTex() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shadowTex) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(shadowTex)
            )
        );
    }
    test_field_shadowTex();
    fn test_field_auxFBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxFBO) as usize - ptr as usize
            },
            208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxFBO)
            )
        );
    }
    test_field_auxFBO();
    fn test_field_auxFBO_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxFBO_r) as usize - ptr as usize
            },
            248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxFBO_r)
            )
        );
    }
    test_field_auxFBO_r();
    fn test_field_auxColor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxColor) as usize - ptr as usize
            },
            288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxColor)
            )
        );
    }
    test_field_auxColor();
    fn test_field_auxColor_r() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxColor_r) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(auxColor_r)
            )
        );
    }
    test_field_auxColor_r();
    fn test_field_ntexture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ntexture) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(ntexture)
            )
        );
    }
    test_field_ntexture();
    fn test_field_textureType() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).textureType) as usize - ptr as usize
            },
            372usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(textureType)
            )
        );
    }
    test_field_textureType();
    fn test_field_texture() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texture) as usize - ptr as usize
            },
            772usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(texture)
            )
        );
    }
    test_field_texture();
    fn test_field_basePlane() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).basePlane) as usize - ptr as usize
            },
            1172usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(basePlane)
            )
        );
    }
    test_field_basePlane();
    fn test_field_baseMesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseMesh) as usize - ptr as usize
            },
            1176usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseMesh)
            )
        );
    }
    test_field_baseMesh();
    fn test_field_baseHField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseHField) as usize - ptr as usize
            },
            1180usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseHField)
            )
        );
    }
    test_field_baseHField();
    fn test_field_baseBuiltin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseBuiltin) as usize - ptr as usize
            },
            1184usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseBuiltin)
            )
        );
    }
    test_field_baseBuiltin();
    fn test_field_baseFontNormal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseFontNormal) as usize - ptr as usize
            },
            1188usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseFontNormal)
            )
        );
    }
    test_field_baseFontNormal();
    fn test_field_baseFontShadow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseFontShadow) as usize - ptr as usize
            },
            1192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseFontShadow)
            )
        );
    }
    test_field_baseFontShadow();
    fn test_field_baseFontBig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).baseFontBig) as usize - ptr as usize
            },
            1196usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(baseFontBig)
            )
        );
    }
    test_field_baseFontBig();
    fn test_field_rangePlane() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangePlane) as usize - ptr as usize
            },
            1200usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(rangePlane)
            )
        );
    }
    test_field_rangePlane();
    fn test_field_rangeMesh() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangeMesh) as usize - ptr as usize
            },
            1204usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(rangeMesh)
            )
        );
    }
    test_field_rangeMesh();
    fn test_field_rangeHField() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangeHField) as usize - ptr as usize
            },
            1208usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(rangeHField)
            )
        );
    }
    test_field_rangeHField();
    fn test_field_rangeBuiltin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangeBuiltin) as usize - ptr as usize
            },
            1212usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(rangeBuiltin)
            )
        );
    }
    test_field_rangeBuiltin();
    fn test_field_rangeFont() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rangeFont) as usize - ptr as usize
            },
            1216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(rangeFont)
            )
        );
    }
    test_field_rangeFont();
    fn test_field_nskin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskin) as usize - ptr as usize
            },
            1220usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(nskin)
            )
        );
    }
    test_field_nskin();
    fn test_field_skinvertVBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinvertVBO) as usize - ptr as usize
            },
            1224usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(skinvertVBO)
            )
        );
    }
    test_field_skinvertVBO();
    fn test_field_skinnormalVBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinnormalVBO) as usize - ptr as usize
            },
            1232usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(skinnormalVBO)
            )
        );
    }
    test_field_skinnormalVBO();
    fn test_field_skintexcoordVBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skintexcoordVBO) as usize - ptr as usize
            },
            1240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(skintexcoordVBO)
            )
        );
    }
    test_field_skintexcoordVBO();
    fn test_field_skinfaceVBO() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinfaceVBO) as usize - ptr as usize
            },
            1248usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(skinfaceVBO)
            )
        );
    }
    test_field_skinfaceVBO();
    fn test_field_charWidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).charWidth) as usize - ptr as usize
            },
            1256usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(charWidth)
            )
        );
    }
    test_field_charWidth();
    fn test_field_charWidthBig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).charWidthBig) as usize - ptr as usize
            },
            1764usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(charWidthBig)
            )
        );
    }
    test_field_charWidthBig();
    fn test_field_charHeight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).charHeight) as usize - ptr as usize
            },
            2272usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(charHeight)
            )
        );
    }
    test_field_charHeight();
    fn test_field_charHeightBig() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).charHeightBig) as usize - ptr as usize
            },
            2276usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(charHeightBig)
            )
        );
    }
    test_field_charHeightBig();
    fn test_field_glInitialized() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).glInitialized) as usize - ptr as usize
            },
            2280usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(glInitialized)
            )
        );
    }
    test_field_glInitialized();
    fn test_field_windowAvailable() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).windowAvailable) as usize - ptr as usize
            },
            2284usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(windowAvailable)
            )
        );
    }
    test_field_windowAvailable();
    fn test_field_windowSamples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).windowSamples) as usize - ptr as usize
            },
            2288usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(windowSamples)
            )
        );
    }
    test_field_windowSamples();
    fn test_field_windowStereo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).windowStereo) as usize - ptr as usize
            },
            2292usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(windowStereo)
            )
        );
    }
    test_field_windowStereo();
    fn test_field_windowDoublebuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).windowDoublebuffer) as usize - ptr as usize
            },
            2296usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(windowDoublebuffer)
            )
        );
    }
    test_field_windowDoublebuffer();
    fn test_field_currentBuffer() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjrContext_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).currentBuffer) as usize - ptr as usize
            },
            2300usize,
            concat!(
                "Offset of field: ",
                stringify!(mjrContext_),
                "::",
                stringify!(currentBuffer)
            )
        );
    }
    test_field_currentBuffer();
}
impl Default for mjrContext_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjrContext = mjrContext_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtButton_ {
    NONE = 0,
    LEFT = 1,
    RIGHT = 2,
    MIDDLE = 3,
}
pub use self::mjtButton_ as mjtButton;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtEvent_ {
    NONE = 0,
    MOVE = 1,
    PRESS = 2,
    RELEASE = 3,
    SCROLL = 4,
    KEY = 5,
    RESIZE = 6,
}
pub use self::mjtEvent_ as mjtEvent;
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtItem_ {
    END = -2,
    SECTION = -1,
    SEPARATOR = 0,
    STATIC = 1,
    BUTTON = 2,
    CHECKINT = 3,
    CHECKBYTE = 4,
    RADIO = 5,
    RADIOLINE = 6,
    SELECT = 7,
    SLIDERINT = 8,
    SLIDERNUM = 9,
    EDITINT = 10,
    EDITNUM = 11,
    EDITTXT = 12,
    mjNITEM = 13,
}
pub use self::mjtItem_ as mjtItem;
pub type mjfItemEnable = ::std::option::Option<
    unsafe extern "C" fn(
        category: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiState_ {
    pub nrect: ::std::os::raw::c_int,
    pub rect: [mjrRect; 25usize],
    pub userdata: *mut ::std::os::raw::c_void,
    pub type_: ::std::os::raw::c_int,
    pub left: ::std::os::raw::c_int,
    pub right: ::std::os::raw::c_int,
    pub middle: ::std::os::raw::c_int,
    pub doubleclick: ::std::os::raw::c_int,
    pub button: ::std::os::raw::c_int,
    pub buttontime: f64,
    pub x: f64,
    pub y: f64,
    pub dx: f64,
    pub dy: f64,
    pub sx: f64,
    pub sy: f64,
    pub control: ::std::os::raw::c_int,
    pub shift: ::std::os::raw::c_int,
    pub alt: ::std::os::raw::c_int,
    pub key: ::std::os::raw::c_int,
    pub keytime: f64,
    pub mouserect: ::std::os::raw::c_int,
    pub dragrect: ::std::os::raw::c_int,
    pub dragbutton: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjuiState_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiState_>(),
        536usize,
        concat!("Size of: ", stringify!(mjuiState_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiState_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiState_))
    );
    fn test_field_nrect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nrect) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(nrect)
            )
        );
    }
    test_field_nrect();
    fn test_field_rect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(rect)
            )
        );
    }
    test_field_rect();
    fn test_field_userdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize
            },
            408usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(userdata)
            )
        );
    }
    test_field_userdata();
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            416usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_left() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize
            },
            420usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(left)
            )
        );
    }
    test_field_left();
    fn test_field_right() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize
            },
            424usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(right)
            )
        );
    }
    test_field_right();
    fn test_field_middle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).middle) as usize - ptr as usize
            },
            428usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(middle)
            )
        );
    }
    test_field_middle();
    fn test_field_doubleclick() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).doubleclick) as usize - ptr as usize
            },
            432usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(doubleclick)
            )
        );
    }
    test_field_doubleclick();
    fn test_field_button() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize
            },
            436usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(button)
            )
        );
    }
    test_field_button();
    fn test_field_buttontime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).buttontime) as usize - ptr as usize
            },
            440usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(buttontime)
            )
        );
    }
    test_field_buttontime();
    fn test_field_x() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize
            },
            448usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(x)
            )
        );
    }
    test_field_x();
    fn test_field_y() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize
            },
            456usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(y)
            )
        );
    }
    test_field_y();
    fn test_field_dx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dx) as usize - ptr as usize
            },
            464usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(dx)
            )
        );
    }
    test_field_dx();
    fn test_field_dy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dy) as usize - ptr as usize
            },
            472usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(dy)
            )
        );
    }
    test_field_dy();
    fn test_field_sx() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sx) as usize - ptr as usize
            },
            480usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(sx)
            )
        );
    }
    test_field_sx();
    fn test_field_sy() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sy) as usize - ptr as usize
            },
            488usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(sy)
            )
        );
    }
    test_field_sy();
    fn test_field_control() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).control) as usize - ptr as usize
            },
            496usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(control)
            )
        );
    }
    test_field_control();
    fn test_field_shift() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shift) as usize - ptr as usize
            },
            500usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(shift)
            )
        );
    }
    test_field_shift();
    fn test_field_alt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).alt) as usize - ptr as usize
            },
            504usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(alt)
            )
        );
    }
    test_field_alt();
    fn test_field_key() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize
            },
            508usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(key)
            )
        );
    }
    test_field_key();
    fn test_field_keytime() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).keytime) as usize - ptr as usize
            },
            512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(keytime)
            )
        );
    }
    test_field_keytime();
    fn test_field_mouserect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mouserect) as usize - ptr as usize
            },
            520usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(mouserect)
            )
        );
    }
    test_field_mouserect();
    fn test_field_dragrect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dragrect) as usize - ptr as usize
            },
            524usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(dragrect)
            )
        );
    }
    test_field_dragrect();
    fn test_field_dragbutton() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiState_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dragbutton) as usize - ptr as usize
            },
            528usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiState_),
                "::",
                stringify!(dragbutton)
            )
        );
    }
    test_field_dragbutton();
}
impl Default for mjuiState_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiState = mjuiState_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeSpacing_ {
    pub total: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub label: ::std::os::raw::c_int,
    pub section: ::std::os::raw::c_int,
    pub itemside: ::std::os::raw::c_int,
    pub itemmid: ::std::os::raw::c_int,
    pub itemver: ::std::os::raw::c_int,
    pub texthor: ::std::os::raw::c_int,
    pub textver: ::std::os::raw::c_int,
    pub linescroll: ::std::os::raw::c_int,
    pub samples: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjuiThemeSpacing_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiThemeSpacing_>(),
        44usize,
        concat!("Size of: ", stringify!(mjuiThemeSpacing_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiThemeSpacing_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjuiThemeSpacing_))
    );
    fn test_field_total() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).total) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(total)
            )
        );
    }
    test_field_total();
    fn test_field_scroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scroll) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(scroll)
            )
        );
    }
    test_field_scroll();
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_section() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).section) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(section)
            )
        );
    }
    test_field_section();
    fn test_field_itemside() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).itemside) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(itemside)
            )
        );
    }
    test_field_itemside();
    fn test_field_itemmid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).itemmid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(itemmid)
            )
        );
    }
    test_field_itemmid();
    fn test_field_itemver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).itemver) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(itemver)
            )
        );
    }
    test_field_itemver();
    fn test_field_texthor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texthor) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(texthor)
            )
        );
    }
    test_field_texthor();
    fn test_field_textver() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).textver) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(textver)
            )
        );
    }
    test_field_textver();
    fn test_field_linescroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linescroll) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(linescroll)
            )
        );
    }
    test_field_linescroll();
    fn test_field_samples() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeSpacing_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).samples) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeSpacing_),
                "::",
                stringify!(samples)
            )
        );
    }
    test_field_samples();
}
pub type mjuiThemeSpacing = mjuiThemeSpacing_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiThemeColor_ {
    pub master: [f32; 3usize],
    pub thumb: [f32; 3usize],
    pub secttitle: [f32; 3usize],
    pub sectfont: [f32; 3usize],
    pub sectsymbol: [f32; 3usize],
    pub sectpane: [f32; 3usize],
    pub shortcut: [f32; 3usize],
    pub fontactive: [f32; 3usize],
    pub fontinactive: [f32; 3usize],
    pub decorinactive: [f32; 3usize],
    pub decorinactive2: [f32; 3usize],
    pub button: [f32; 3usize],
    pub check: [f32; 3usize],
    pub radio: [f32; 3usize],
    pub select: [f32; 3usize],
    pub select2: [f32; 3usize],
    pub slider: [f32; 3usize],
    pub slider2: [f32; 3usize],
    pub edit: [f32; 3usize],
    pub edit2: [f32; 3usize],
    pub cursor: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_mjuiThemeColor_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiThemeColor_>(),
        252usize,
        concat!("Size of: ", stringify!(mjuiThemeColor_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiThemeColor_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjuiThemeColor_))
    );
    fn test_field_master() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).master) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(master)
            )
        );
    }
    test_field_master();
    fn test_field_thumb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).thumb) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(thumb)
            )
        );
    }
    test_field_thumb();
    fn test_field_secttitle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).secttitle) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(secttitle)
            )
        );
    }
    test_field_secttitle();
    fn test_field_sectfont() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sectfont) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(sectfont)
            )
        );
    }
    test_field_sectfont();
    fn test_field_sectsymbol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sectsymbol) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(sectsymbol)
            )
        );
    }
    test_field_sectsymbol();
    fn test_field_sectpane() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sectpane) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(sectpane)
            )
        );
    }
    test_field_sectpane();
    fn test_field_shortcut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shortcut) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(shortcut)
            )
        );
    }
    test_field_shortcut();
    fn test_field_fontactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fontactive) as usize - ptr as usize
            },
            84usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(fontactive)
            )
        );
    }
    test_field_fontactive();
    fn test_field_fontinactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fontinactive) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(fontinactive)
            )
        );
    }
    test_field_fontinactive();
    fn test_field_decorinactive() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).decorinactive) as usize - ptr as usize
            },
            108usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(decorinactive)
            )
        );
    }
    test_field_decorinactive();
    fn test_field_decorinactive2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).decorinactive2) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(decorinactive2)
            )
        );
    }
    test_field_decorinactive2();
    fn test_field_button() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).button) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(button)
            )
        );
    }
    test_field_button();
    fn test_field_check() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).check) as usize - ptr as usize
            },
            144usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(check)
            )
        );
    }
    test_field_check();
    fn test_field_radio() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radio) as usize - ptr as usize
            },
            156usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(radio)
            )
        );
    }
    test_field_radio();
    fn test_field_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).select) as usize - ptr as usize
            },
            168usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(select)
            )
        );
    }
    test_field_select();
    fn test_field_select2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).select2) as usize - ptr as usize
            },
            180usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(select2)
            )
        );
    }
    test_field_select2();
    fn test_field_slider() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slider) as usize - ptr as usize
            },
            192usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(slider)
            )
        );
    }
    test_field_slider();
    fn test_field_slider2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slider2) as usize - ptr as usize
            },
            204usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(slider2)
            )
        );
    }
    test_field_slider2();
    fn test_field_edit() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize
            },
            216usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(edit)
            )
        );
    }
    test_field_edit();
    fn test_field_edit2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edit2) as usize - ptr as usize
            },
            228usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(edit2)
            )
        );
    }
    test_field_edit2();
    fn test_field_cursor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiThemeColor_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cursor) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiThemeColor_),
                "::",
                stringify!(cursor)
            )
        );
    }
    test_field_cursor();
}
pub type mjuiThemeColor = mjuiThemeColor_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSingle_ {
    pub modifier: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_mjuiItemSingle_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItemSingle_>(),
        8usize,
        concat!("Size of: ", stringify!(mjuiItemSingle_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItemSingle_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjuiItemSingle_))
    );
    fn test_field_modifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemSingle_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifier) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemSingle_),
                "::",
                stringify!(modifier)
            )
        );
    }
    test_field_modifier();
    fn test_field_shortcut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemSingle_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shortcut) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemSingle_),
                "::",
                stringify!(shortcut)
            )
        );
    }
    test_field_shortcut();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiItemMulti_ {
    pub nelem: ::std::os::raw::c_int,
    pub name: [[::std::os::raw::c_char; 40usize]; 35usize],
}
#[test]
fn bindgen_test_layout_mjuiItemMulti_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItemMulti_>(),
        1404usize,
        concat!("Size of: ", stringify!(mjuiItemMulti_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItemMulti_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjuiItemMulti_))
    );
    fn test_field_nelem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemMulti_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nelem) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemMulti_),
                "::",
                stringify!(nelem)
            )
        );
    }
    test_field_nelem();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemMulti_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemMulti_),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
}
impl Default for mjuiItemMulti_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemSlider_ {
    pub range: [f64; 2usize],
    pub divisions: f64,
}
#[test]
fn bindgen_test_layout_mjuiItemSlider_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItemSlider_>(),
        24usize,
        concat!("Size of: ", stringify!(mjuiItemSlider_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItemSlider_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiItemSlider_))
    );
    fn test_field_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemSlider_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemSlider_),
                "::",
                stringify!(range)
            )
        );
    }
    test_field_range();
    fn test_field_divisions() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemSlider_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).divisions) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemSlider_),
                "::",
                stringify!(divisions)
            )
        );
    }
    test_field_divisions();
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjuiItemEdit_ {
    pub nelem: ::std::os::raw::c_int,
    pub range: [[f64; 2usize]; 7usize],
}
#[test]
fn bindgen_test_layout_mjuiItemEdit_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItemEdit_>(),
        120usize,
        concat!("Size of: ", stringify!(mjuiItemEdit_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItemEdit_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiItemEdit_))
    );
    fn test_field_nelem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemEdit_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nelem) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemEdit_),
                "::",
                stringify!(nelem)
            )
        );
    }
    test_field_nelem();
    fn test_field_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItemEdit_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItemEdit_),
                "::",
                stringify!(range)
            )
        );
    }
    test_field_range();
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiItem_ {
    pub type_: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub pdata: *mut ::std::os::raw::c_void,
    pub sectionid: ::std::os::raw::c_int,
    pub itemid: ::std::os::raw::c_int,
    pub __bindgen_anon_1: mjuiItem___bindgen_ty_1,
    pub rect: mjrRect,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union mjuiItem___bindgen_ty_1 {
    pub single: mjuiItemSingle_,
    pub multi: mjuiItemMulti_,
    pub slider: mjuiItemSlider_,
    pub edit: mjuiItemEdit_,
}
#[test]
fn bindgen_test_layout_mjuiItem___bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItem___bindgen_ty_1>(),
        1408usize,
        concat!("Size of: ", stringify!(mjuiItem___bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItem___bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiItem___bindgen_ty_1))
    );
    fn test_field_single() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjuiItem___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).single) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem___bindgen_ty_1),
                "::",
                stringify!(single)
            )
        );
    }
    test_field_single();
    fn test_field_multi() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjuiItem___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).multi) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem___bindgen_ty_1),
                "::",
                stringify!(multi)
            )
        );
    }
    test_field_multi();
    fn test_field_slider() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjuiItem___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).slider) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem___bindgen_ty_1),
                "::",
                stringify!(slider)
            )
        );
    }
    test_field_slider();
    fn test_field_edit() {
        assert_eq!(
            unsafe {
                let uninit =
                    ::std::mem::MaybeUninit::<mjuiItem___bindgen_ty_1>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edit) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem___bindgen_ty_1),
                "::",
                stringify!(edit)
            )
        );
    }
    test_field_edit();
}
impl Default for mjuiItem___bindgen_ty_1 {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
#[test]
fn bindgen_test_layout_mjuiItem_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiItem_>(),
        1488usize,
        concat!("Size of: ", stringify!(mjuiItem_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiItem_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiItem_))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_pdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pdata) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(pdata)
            )
        );
    }
    test_field_pdata();
    fn test_field_sectionid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sectionid) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(sectionid)
            )
        );
    }
    test_field_sectionid();
    fn test_field_itemid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).itemid) as usize - ptr as usize
            },
            60usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(itemid)
            )
        );
    }
    test_field_itemid();
    fn test_field_rect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiItem_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rect) as usize - ptr as usize
            },
            1472usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiItem_),
                "::",
                stringify!(rect)
            )
        );
    }
    test_field_rect();
}
impl Default for mjuiItem_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiItem = mjuiItem_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjuiSection_ {
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub modifier: ::std::os::raw::c_int,
    pub shortcut: ::std::os::raw::c_int,
    pub nitem: ::std::os::raw::c_int,
    pub item: [mjuiItem; 80usize],
    pub rtitle: mjrRect,
    pub rcontent: mjrRect,
}
#[test]
fn bindgen_test_layout_mjuiSection_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiSection_>(),
        119128usize,
        concat!("Size of: ", stringify!(mjuiSection_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiSection_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiSection_))
    );
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_modifier() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modifier) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(modifier)
            )
        );
    }
    test_field_modifier();
    fn test_field_shortcut() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shortcut) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(shortcut)
            )
        );
    }
    test_field_shortcut();
    fn test_field_nitem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nitem) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(nitem)
            )
        );
    }
    test_field_nitem();
    fn test_field_item() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).item) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(item)
            )
        );
    }
    test_field_item();
    fn test_field_rtitle() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rtitle) as usize - ptr as usize
            },
            119096usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(rtitle)
            )
        );
    }
    test_field_rtitle();
    fn test_field_rcontent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiSection_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rcontent) as usize - ptr as usize
            },
            119112usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiSection_),
                "::",
                stringify!(rcontent)
            )
        );
    }
    test_field_rcontent();
}
impl Default for mjuiSection_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiSection = mjuiSection_;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct mjUI_ {
    pub spacing: mjuiThemeSpacing,
    pub color: mjuiThemeColor,
    pub predicate: mjfItemEnable,
    pub userdata: *mut ::std::os::raw::c_void,
    pub rectid: ::std::os::raw::c_int,
    pub auxid: ::std::os::raw::c_int,
    pub radiocol: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub maxheight: ::std::os::raw::c_int,
    pub scroll: ::std::os::raw::c_int,
    pub mousesect: ::std::os::raw::c_int,
    pub mouseitem: ::std::os::raw::c_int,
    pub mousehelp: ::std::os::raw::c_int,
    pub editsect: ::std::os::raw::c_int,
    pub edititem: ::std::os::raw::c_int,
    pub editcursor: ::std::os::raw::c_int,
    pub editscroll: ::std::os::raw::c_int,
    pub edittext: [::std::os::raw::c_char; 300usize],
    pub editchanged: *mut mjuiItem,
    pub nsect: ::std::os::raw::c_int,
    pub sect: [mjuiSection; 10usize],
}
#[test]
fn bindgen_test_layout_mjUI_() {
    assert_eq!(
        ::std::mem::size_of::<mjUI_>(),
        1191968usize,
        concat!("Size of: ", stringify!(mjUI_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjUI_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjUI_))
    );
    fn test_field_spacing() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).spacing) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(spacing)
            )
        );
    }
    test_field_spacing();
    fn test_field_color() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(color)
            )
        );
    }
    test_field_color();
    fn test_field_predicate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).predicate) as usize - ptr as usize
            },
            296usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(predicate)
            )
        );
    }
    test_field_predicate();
    fn test_field_userdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).userdata) as usize - ptr as usize
            },
            304usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(userdata)
            )
        );
    }
    test_field_userdata();
    fn test_field_rectid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rectid) as usize - ptr as usize
            },
            312usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(rectid)
            )
        );
    }
    test_field_rectid();
    fn test_field_auxid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).auxid) as usize - ptr as usize
            },
            316usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(auxid)
            )
        );
    }
    test_field_auxid();
    fn test_field_radiocol() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).radiocol) as usize - ptr as usize
            },
            320usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(radiocol)
            )
        );
    }
    test_field_radiocol();
    fn test_field_width() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize
            },
            324usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(width)
            )
        );
    }
    test_field_width();
    fn test_field_height() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize
            },
            328usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(height)
            )
        );
    }
    test_field_height();
    fn test_field_maxheight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxheight) as usize - ptr as usize
            },
            332usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(maxheight)
            )
        );
    }
    test_field_maxheight();
    fn test_field_scroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scroll) as usize - ptr as usize
            },
            336usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(scroll)
            )
        );
    }
    test_field_scroll();
    fn test_field_mousesect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mousesect) as usize - ptr as usize
            },
            340usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(mousesect)
            )
        );
    }
    test_field_mousesect();
    fn test_field_mouseitem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mouseitem) as usize - ptr as usize
            },
            344usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(mouseitem)
            )
        );
    }
    test_field_mouseitem();
    fn test_field_mousehelp() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mousehelp) as usize - ptr as usize
            },
            348usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(mousehelp)
            )
        );
    }
    test_field_mousehelp();
    fn test_field_editsect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).editsect) as usize - ptr as usize
            },
            352usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(editsect)
            )
        );
    }
    test_field_editsect();
    fn test_field_edititem() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edititem) as usize - ptr as usize
            },
            356usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(edititem)
            )
        );
    }
    test_field_edititem();
    fn test_field_editcursor() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).editcursor) as usize - ptr as usize
            },
            360usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(editcursor)
            )
        );
    }
    test_field_editcursor();
    fn test_field_editscroll() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).editscroll) as usize - ptr as usize
            },
            364usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(editscroll)
            )
        );
    }
    test_field_editscroll();
    fn test_field_edittext() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).edittext) as usize - ptr as usize
            },
            368usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(edittext)
            )
        );
    }
    test_field_edittext();
    fn test_field_editchanged() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).editchanged) as usize - ptr as usize
            },
            672usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(editchanged)
            )
        );
    }
    test_field_editchanged();
    fn test_field_nsect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nsect) as usize - ptr as usize
            },
            680usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(nsect)
            )
        );
    }
    test_field_nsect();
    fn test_field_sect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjUI_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sect) as usize - ptr as usize
            },
            688usize,
            concat!(
                "Offset of field: ",
                stringify!(mjUI_),
                "::",
                stringify!(sect)
            )
        );
    }
    test_field_sect();
}
impl Default for mjUI_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjUI = mjUI_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjuiDef_ {
    pub type_: ::std::os::raw::c_int,
    pub name: [::std::os::raw::c_char; 40usize],
    pub state: ::std::os::raw::c_int,
    pub pdata: *mut ::std::os::raw::c_void,
    pub other: [::std::os::raw::c_char; 300usize],
}
#[test]
fn bindgen_test_layout_mjuiDef_() {
    assert_eq!(
        ::std::mem::size_of::<mjuiDef_>(),
        360usize,
        concat!("Size of: ", stringify!(mjuiDef_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjuiDef_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjuiDef_))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiDef_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiDef_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_name() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiDef_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiDef_),
                "::",
                stringify!(name)
            )
        );
    }
    test_field_name();
    fn test_field_state() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiDef_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiDef_),
                "::",
                stringify!(state)
            )
        );
    }
    test_field_state();
    fn test_field_pdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiDef_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pdata) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiDef_),
                "::",
                stringify!(pdata)
            )
        );
    }
    test_field_pdata();
    fn test_field_other() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjuiDef_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjuiDef_),
                "::",
                stringify!(other)
            )
        );
    }
    test_field_other();
}
impl Default for mjuiDef_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjuiDef = mjuiDef_;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtCatBit_ {
    STATIC = 1,
    DYNAMIC = 2,
    DECOR = 4,
    ALL = 7,
}
pub use self::mjtCatBit_ as mjtCatBit;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtMouse_ {
    NONE = 0,
    ROTATE_V = 1,
    ROTATE_H = 2,
    MOVE_V = 3,
    MOVE_H = 4,
    ZOOM = 5,
    SELECT = 6,
}
pub use self::mjtMouse_ as mjtMouse;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtPertBit_ {
    TRANSLATE = 1,
    ROTATE = 2,
}
pub use self::mjtPertBit_ as mjtPertBit;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtCamera_ {
    FREE = 0,
    TRACKING = 1,
    FIXED = 2,
    USER = 3,
}
pub use self::mjtCamera_ as mjtCamera;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtLabel_ {
    NONE = 0,
    BODY = 1,
    JOINT = 2,
    GEOM = 3,
    SITE = 4,
    CAMERA = 5,
    LIGHT = 6,
    TENDON = 7,
    ACTUATOR = 8,
    CONSTRAINT = 9,
    SKIN = 10,
    SELECTION = 11,
    SELPNT = 12,
    CONTACTFORCE = 13,
    mjNLABEL = 14,
}
pub use self::mjtLabel_ as mjtLabel;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtFrame_ {
    NONE = 0,
    BODY = 1,
    GEOM = 2,
    SITE = 3,
    CAMERA = 4,
    LIGHT = 5,
    CONTACT = 6,
    WORLD = 7,
    mjNFRAME = 8,
}
pub use self::mjtFrame_ as mjtFrame;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtVisFlag_ {
    CONVEXHULL = 0,
    TEXTURE = 1,
    JOINT = 2,
    CAMERA = 3,
    ACTUATOR = 4,
    ACTIVATION = 5,
    LIGHT = 6,
    TENDON = 7,
    RANGEFINDER = 8,
    CONSTRAINT = 9,
    INERTIA = 10,
    SCLINERTIA = 11,
    PERTFORCE = 12,
    PERTOBJ = 13,
    CONTACTPOINT = 14,
    CONTACTFORCE = 15,
    CONTACTSPLIT = 16,
    TRANSPARENT = 17,
    AUTOCONNECT = 18,
    COM = 19,
    SELECT = 20,
    STATIC = 21,
    SKIN = 22,
    mjNVISFLAG = 23,
}
pub use self::mjtVisFlag_ as mjtVisFlag;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtRndFlag_ {
    SHADOW = 0,
    WIREFRAME = 1,
    REFLECTION = 2,
    ADDITIVE = 3,
    SKYBOX = 4,
    FOG = 5,
    HAZE = 6,
    SEGMENT = 7,
    IDCOLOR = 8,
    CULL_FACE = 9,
    mjNRNDFLAG = 10,
}
pub use self::mjtRndFlag_ as mjtRndFlag;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum mjtStereo_ {
    NONE = 0,
    QUADBUFFERED = 1,
    SIDEBYSIDE = 2,
}
pub use self::mjtStereo_ as mjtStereo;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvPerturb_ {
    pub select: ::std::os::raw::c_int,
    pub skinselect: ::std::os::raw::c_int,
    pub active: ::std::os::raw::c_int,
    pub active2: ::std::os::raw::c_int,
    pub refpos: [mjtNum; 3usize],
    pub refquat: [mjtNum; 4usize],
    pub localpos: [mjtNum; 3usize],
    pub scale: mjtNum,
}
#[test]
fn bindgen_test_layout_mjvPerturb_() {
    assert_eq!(
        ::std::mem::size_of::<mjvPerturb_>(),
        104usize,
        concat!("Size of: ", stringify!(mjvPerturb_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvPerturb_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjvPerturb_))
    );
    fn test_field_select() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).select) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(select)
            )
        );
    }
    test_field_select();
    fn test_field_skinselect() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinselect) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(skinselect)
            )
        );
    }
    test_field_skinselect();
    fn test_field_active() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(active)
            )
        );
    }
    test_field_active();
    fn test_field_active2() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).active2) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(active2)
            )
        );
    }
    test_field_active2();
    fn test_field_refpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refpos) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(refpos)
            )
        );
    }
    test_field_refpos();
    fn test_field_refquat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).refquat) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(refquat)
            )
        );
    }
    test_field_refquat();
    fn test_field_localpos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).localpos) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(localpos)
            )
        );
    }
    test_field_localpos();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvPerturb_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            96usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvPerturb_),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
}
pub type mjvPerturb = mjvPerturb_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvCamera_ {
    pub type_: ::std::os::raw::c_int,
    pub fixedcamid: ::std::os::raw::c_int,
    pub trackbodyid: ::std::os::raw::c_int,
    pub lookat: [mjtNum; 3usize],
    pub distance: mjtNum,
    pub azimuth: mjtNum,
    pub elevation: mjtNum,
}
#[test]
fn bindgen_test_layout_mjvCamera_() {
    assert_eq!(
        ::std::mem::size_of::<mjvCamera_>(),
        64usize,
        concat!("Size of: ", stringify!(mjvCamera_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvCamera_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjvCamera_))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_fixedcamid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).fixedcamid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(fixedcamid)
            )
        );
    }
    test_field_fixedcamid();
    fn test_field_trackbodyid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).trackbodyid) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(trackbodyid)
            )
        );
    }
    test_field_trackbodyid();
    fn test_field_lookat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lookat) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(lookat)
            )
        );
    }
    test_field_lookat();
    fn test_field_distance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(distance)
            )
        );
    }
    test_field_distance();
    fn test_field_azimuth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).azimuth) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(azimuth)
            )
        );
    }
    test_field_azimuth();
    fn test_field_elevation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).elevation) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvCamera_),
                "::",
                stringify!(elevation)
            )
        );
    }
    test_field_elevation();
}
pub type mjvCamera = mjvCamera_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvGLCamera_ {
    pub pos: [f32; 3usize],
    pub forward: [f32; 3usize],
    pub up: [f32; 3usize],
    pub frustum_center: f32,
    pub frustum_bottom: f32,
    pub frustum_top: f32,
    pub frustum_near: f32,
    pub frustum_far: f32,
}
#[test]
fn bindgen_test_layout_mjvGLCamera_() {
    assert_eq!(
        ::std::mem::size_of::<mjvGLCamera_>(),
        56usize,
        concat!("Size of: ", stringify!(mjvGLCamera_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvGLCamera_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjvGLCamera_))
    );
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_forward() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).forward) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(forward)
            )
        );
    }
    test_field_forward();
    fn test_field_up() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).up) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(up)
            )
        );
    }
    test_field_up();
    fn test_field_frustum_center() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frustum_center) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(frustum_center)
            )
        );
    }
    test_field_frustum_center();
    fn test_field_frustum_bottom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frustum_bottom) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(frustum_bottom)
            )
        );
    }
    test_field_frustum_bottom();
    fn test_field_frustum_top() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frustum_top) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(frustum_top)
            )
        );
    }
    test_field_frustum_top();
    fn test_field_frustum_near() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frustum_near) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(frustum_near)
            )
        );
    }
    test_field_frustum_near();
    fn test_field_frustum_far() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGLCamera_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frustum_far) as usize - ptr as usize
            },
            52usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGLCamera_),
                "::",
                stringify!(frustum_far)
            )
        );
    }
    test_field_frustum_far();
}
pub type mjvGLCamera = mjvGLCamera_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvGeom_ {
    pub type_: ::std::os::raw::c_int,
    pub dataid: ::std::os::raw::c_int,
    pub objtype: ::std::os::raw::c_int,
    pub objid: ::std::os::raw::c_int,
    pub category: ::std::os::raw::c_int,
    pub texid: ::std::os::raw::c_int,
    pub texuniform: ::std::os::raw::c_int,
    pub texcoord: ::std::os::raw::c_int,
    pub segid: ::std::os::raw::c_int,
    pub texrepeat: [f32; 2usize],
    pub size: [f32; 3usize],
    pub pos: [f32; 3usize],
    pub mat: [f32; 9usize],
    pub rgba: [f32; 4usize],
    pub emission: f32,
    pub specular: f32,
    pub shininess: f32,
    pub reflectance: f32,
    pub label: [::std::os::raw::c_char; 100usize],
    pub camdist: f32,
    pub modelrbound: f32,
    pub transparent: mjtByte,
}
#[test]
fn bindgen_test_layout_mjvGeom_() {
    assert_eq!(
        ::std::mem::size_of::<mjvGeom_>(),
        248usize,
        concat!("Size of: ", stringify!(mjvGeom_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvGeom_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjvGeom_))
    );
    fn test_field_type() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(type_)
            )
        );
    }
    test_field_type();
    fn test_field_dataid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dataid) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(dataid)
            )
        );
    }
    test_field_dataid();
    fn test_field_objtype() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objtype) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(objtype)
            )
        );
    }
    test_field_objtype();
    fn test_field_objid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).objid) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(objid)
            )
        );
    }
    test_field_objid();
    fn test_field_category() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).category) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(category)
            )
        );
    }
    test_field_category();
    fn test_field_texid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texid) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(texid)
            )
        );
    }
    test_field_texid();
    fn test_field_texuniform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texuniform) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(texuniform)
            )
        );
    }
    test_field_texuniform();
    fn test_field_texcoord() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texcoord) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(texcoord)
            )
        );
    }
    test_field_texcoord();
    fn test_field_segid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).segid) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(segid)
            )
        );
    }
    test_field_segid();
    fn test_field_texrepeat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).texrepeat) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(texrepeat)
            )
        );
    }
    test_field_texrepeat();
    fn test_field_size() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(size)
            )
        );
    }
    test_field_size();
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_mat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).mat) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(mat)
            )
        );
    }
    test_field_mat();
    fn test_field_rgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rgba) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(rgba)
            )
        );
    }
    test_field_rgba();
    fn test_field_emission() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).emission) as usize - ptr as usize
            },
            120usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(emission)
            )
        );
    }
    test_field_emission();
    fn test_field_specular() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specular) as usize - ptr as usize
            },
            124usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(specular)
            )
        );
    }
    test_field_specular();
    fn test_field_shininess() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).shininess) as usize - ptr as usize
            },
            128usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(shininess)
            )
        );
    }
    test_field_shininess();
    fn test_field_reflectance() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).reflectance) as usize - ptr as usize
            },
            132usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(reflectance)
            )
        );
    }
    test_field_reflectance();
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            136usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_camdist() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).camdist) as usize - ptr as usize
            },
            236usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(camdist)
            )
        );
    }
    test_field_camdist();
    fn test_field_modelrbound() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).modelrbound) as usize - ptr as usize
            },
            240usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(modelrbound)
            )
        );
    }
    test_field_modelrbound();
    fn test_field_transparent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvGeom_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).transparent) as usize - ptr as usize
            },
            244usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvGeom_),
                "::",
                stringify!(transparent)
            )
        );
    }
    test_field_transparent();
}
impl Default for mjvGeom_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvGeom = mjvGeom_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvLight_ {
    pub pos: [f32; 3usize],
    pub dir: [f32; 3usize],
    pub attenuation: [f32; 3usize],
    pub cutoff: f32,
    pub exponent: f32,
    pub ambient: [f32; 3usize],
    pub diffuse: [f32; 3usize],
    pub specular: [f32; 3usize],
    pub headlight: mjtByte,
    pub directional: mjtByte,
    pub castshadow: mjtByte,
}
#[test]
fn bindgen_test_layout_mjvLight_() {
    assert_eq!(
        ::std::mem::size_of::<mjvLight_>(),
        84usize,
        concat!("Size of: ", stringify!(mjvLight_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvLight_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjvLight_))
    );
    fn test_field_pos() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(pos)
            )
        );
    }
    test_field_pos();
    fn test_field_dir() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).dir) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(dir)
            )
        );
    }
    test_field_dir();
    fn test_field_attenuation() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).attenuation) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(attenuation)
            )
        );
    }
    test_field_attenuation();
    fn test_field_cutoff() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).cutoff) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(cutoff)
            )
        );
    }
    test_field_cutoff();
    fn test_field_exponent() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).exponent) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(exponent)
            )
        );
    }
    test_field_exponent();
    fn test_field_ambient() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ambient) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(ambient)
            )
        );
    }
    test_field_ambient();
    fn test_field_diffuse() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).diffuse) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(diffuse)
            )
        );
    }
    test_field_diffuse();
    fn test_field_specular() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).specular) as usize - ptr as usize
            },
            68usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(specular)
            )
        );
    }
    test_field_specular();
    fn test_field_headlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).headlight) as usize - ptr as usize
            },
            80usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(headlight)
            )
        );
    }
    test_field_headlight();
    fn test_field_directional() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).directional) as usize - ptr as usize
            },
            81usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(directional)
            )
        );
    }
    test_field_directional();
    fn test_field_castshadow() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvLight_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).castshadow) as usize - ptr as usize
            },
            82usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvLight_),
                "::",
                stringify!(castshadow)
            )
        );
    }
    test_field_castshadow();
}
pub type mjvLight = mjvLight_;
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct mjvOption_ {
    pub label: ::std::os::raw::c_int,
    pub frame: ::std::os::raw::c_int,
    pub geomgroup: [mjtByte; 6usize],
    pub sitegroup: [mjtByte; 6usize],
    pub jointgroup: [mjtByte; 6usize],
    pub tendongroup: [mjtByte; 6usize],
    pub actuatorgroup: [mjtByte; 6usize],
    pub skingroup: [mjtByte; 6usize],
    pub flags: [mjtByte; 23usize],
}
#[test]
fn bindgen_test_layout_mjvOption_() {
    assert_eq!(
        ::std::mem::size_of::<mjvOption_>(),
        68usize,
        concat!("Size of: ", stringify!(mjvOption_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvOption_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjvOption_))
    );
    fn test_field_label() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(label)
            )
        );
    }
    test_field_label();
    fn test_field_frame() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).frame) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(frame)
            )
        );
    }
    test_field_frame();
    fn test_field_geomgroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomgroup) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(geomgroup)
            )
        );
    }
    test_field_geomgroup();
    fn test_field_sitegroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).sitegroup) as usize - ptr as usize
            },
            14usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(sitegroup)
            )
        );
    }
    test_field_sitegroup();
    fn test_field_jointgroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).jointgroup) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(jointgroup)
            )
        );
    }
    test_field_jointgroup();
    fn test_field_tendongroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).tendongroup) as usize - ptr as usize
            },
            26usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(tendongroup)
            )
        );
    }
    test_field_tendongroup();
    fn test_field_actuatorgroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).actuatorgroup) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(actuatorgroup)
            )
        );
    }
    test_field_actuatorgroup();
    fn test_field_skingroup() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skingroup) as usize - ptr as usize
            },
            38usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(skingroup)
            )
        );
    }
    test_field_skingroup();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvOption_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvOption_),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
}
pub type mjvOption = mjvOption_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvScene_ {
    pub maxgeom: ::std::os::raw::c_int,
    pub ngeom: ::std::os::raw::c_int,
    pub geoms: *mut mjvGeom,
    pub geomorder: *mut ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub skinfacenum: *mut ::std::os::raw::c_int,
    pub skinvertadr: *mut ::std::os::raw::c_int,
    pub skinvertnum: *mut ::std::os::raw::c_int,
    pub skinvert: *mut f32,
    pub skinnormal: *mut f32,
    pub nlight: ::std::os::raw::c_int,
    pub lights: [mjvLight; 100usize],
    pub camera: [mjvGLCamera; 2usize],
    pub enabletransform: mjtByte,
    pub translate: [f32; 3usize],
    pub rotate: [f32; 4usize],
    pub scale: f32,
    pub stereo: ::std::os::raw::c_int,
    pub flags: [mjtByte; 10usize],
    pub framewidth: ::std::os::raw::c_int,
    pub framergb: [f32; 3usize],
}
#[test]
fn bindgen_test_layout_mjvScene_() {
    assert_eq!(
        ::std::mem::size_of::<mjvScene_>(),
        8656usize,
        concat!("Size of: ", stringify!(mjvScene_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvScene_>(),
        8usize,
        concat!("Alignment of ", stringify!(mjvScene_))
    );
    fn test_field_maxgeom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).maxgeom) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(maxgeom)
            )
        );
    }
    test_field_maxgeom();
    fn test_field_ngeom() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).ngeom) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(ngeom)
            )
        );
    }
    test_field_ngeom();
    fn test_field_geoms() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geoms) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(geoms)
            )
        );
    }
    test_field_geoms();
    fn test_field_geomorder() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).geomorder) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(geomorder)
            )
        );
    }
    test_field_geomorder();
    fn test_field_nskin() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nskin) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(nskin)
            )
        );
    }
    test_field_nskin();
    fn test_field_skinfacenum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinfacenum) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(skinfacenum)
            )
        );
    }
    test_field_skinfacenum();
    fn test_field_skinvertadr() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinvertadr) as usize - ptr as usize
            },
            40usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(skinvertadr)
            )
        );
    }
    test_field_skinvertadr();
    fn test_field_skinvertnum() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinvertnum) as usize - ptr as usize
            },
            48usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(skinvertnum)
            )
        );
    }
    test_field_skinvertnum();
    fn test_field_skinvert() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinvert) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(skinvert)
            )
        );
    }
    test_field_skinvert();
    fn test_field_skinnormal() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).skinnormal) as usize - ptr as usize
            },
            64usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(skinnormal)
            )
        );
    }
    test_field_skinnormal();
    fn test_field_nlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).nlight) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(nlight)
            )
        );
    }
    test_field_nlight();
    fn test_field_lights() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).lights) as usize - ptr as usize
            },
            76usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(lights)
            )
        );
    }
    test_field_lights();
    fn test_field_camera() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).camera) as usize - ptr as usize
            },
            8476usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(camera)
            )
        );
    }
    test_field_camera();
    fn test_field_enabletransform() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).enabletransform) as usize - ptr as usize
            },
            8588usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(enabletransform)
            )
        );
    }
    test_field_enabletransform();
    fn test_field_translate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).translate) as usize - ptr as usize
            },
            8592usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(translate)
            )
        );
    }
    test_field_translate();
    fn test_field_rotate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rotate) as usize - ptr as usize
            },
            8604usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(rotate)
            )
        );
    }
    test_field_rotate();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            8620usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_stereo() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).stereo) as usize - ptr as usize
            },
            8624usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(stereo)
            )
        );
    }
    test_field_stereo();
    fn test_field_flags() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize
            },
            8628usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(flags)
            )
        );
    }
    test_field_flags();
    fn test_field_framewidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).framewidth) as usize - ptr as usize
            },
            8640usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(framewidth)
            )
        );
    }
    test_field_framewidth();
    fn test_field_framergb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvScene_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).framergb) as usize - ptr as usize
            },
            8644usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvScene_),
                "::",
                stringify!(framergb)
            )
        );
    }
    test_field_framergb();
}
impl Default for mjvScene_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvScene = mjvScene_;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mjvFigure_ {
    pub flg_legend: ::std::os::raw::c_int,
    pub flg_ticklabel: [::std::os::raw::c_int; 2usize],
    pub flg_extend: ::std::os::raw::c_int,
    pub flg_barplot: ::std::os::raw::c_int,
    pub flg_selection: ::std::os::raw::c_int,
    pub flg_symmetric: ::std::os::raw::c_int,
    pub linewidth: f32,
    pub gridwidth: f32,
    pub gridsize: [::std::os::raw::c_int; 2usize],
    pub gridrgb: [f32; 3usize],
    pub figurergba: [f32; 4usize],
    pub panergba: [f32; 4usize],
    pub legendrgba: [f32; 4usize],
    pub textrgb: [f32; 3usize],
    pub linergb: [[f32; 3usize]; 100usize],
    pub range: [[f32; 2usize]; 2usize],
    pub xformat: [::std::os::raw::c_char; 20usize],
    pub yformat: [::std::os::raw::c_char; 20usize],
    pub minwidth: [::std::os::raw::c_char; 20usize],
    pub title: [::std::os::raw::c_char; 1000usize],
    pub xlabel: [::std::os::raw::c_char; 100usize],
    pub linename: [[::std::os::raw::c_char; 100usize]; 100usize],
    pub legendoffset: ::std::os::raw::c_int,
    pub subplot: ::std::os::raw::c_int,
    pub highlight: [::std::os::raw::c_int; 2usize],
    pub highlightid: ::std::os::raw::c_int,
    pub selection: f32,
    pub linepnt: [::std::os::raw::c_int; 100usize],
    pub linedata: [[f32; 2000usize]; 100usize],
    pub xaxispixel: [::std::os::raw::c_int; 2usize],
    pub yaxispixel: [::std::os::raw::c_int; 2usize],
    pub xaxisdata: [f32; 2usize],
    pub yaxisdata: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_mjvFigure_() {
    assert_eq!(
        ::std::mem::size_of::<mjvFigure_>(),
        812948usize,
        concat!("Size of: ", stringify!(mjvFigure_))
    );
    assert_eq!(
        ::std::mem::align_of::<mjvFigure_>(),
        4usize,
        concat!("Alignment of ", stringify!(mjvFigure_))
    );
    fn test_field_flg_legend() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_legend) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_legend)
            )
        );
    }
    test_field_flg_legend();
    fn test_field_flg_ticklabel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_ticklabel) as usize - ptr as usize
            },
            4usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_ticklabel)
            )
        );
    }
    test_field_flg_ticklabel();
    fn test_field_flg_extend() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_extend) as usize - ptr as usize
            },
            12usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_extend)
            )
        );
    }
    test_field_flg_extend();
    fn test_field_flg_barplot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_barplot) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_barplot)
            )
        );
    }
    test_field_flg_barplot();
    fn test_field_flg_selection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_selection) as usize - ptr as usize
            },
            20usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_selection)
            )
        );
    }
    test_field_flg_selection();
    fn test_field_flg_symmetric() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).flg_symmetric) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(flg_symmetric)
            )
        );
    }
    test_field_flg_symmetric();
    fn test_field_linewidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linewidth) as usize - ptr as usize
            },
            28usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(linewidth)
            )
        );
    }
    test_field_linewidth();
    fn test_field_gridwidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridwidth) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(gridwidth)
            )
        );
    }
    test_field_gridwidth();
    fn test_field_gridsize() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridsize) as usize - ptr as usize
            },
            36usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(gridsize)
            )
        );
    }
    test_field_gridsize();
    fn test_field_gridrgb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).gridrgb) as usize - ptr as usize
            },
            44usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(gridrgb)
            )
        );
    }
    test_field_gridrgb();
    fn test_field_figurergba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).figurergba) as usize - ptr as usize
            },
            56usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(figurergba)
            )
        );
    }
    test_field_figurergba();
    fn test_field_panergba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).panergba) as usize - ptr as usize
            },
            72usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(panergba)
            )
        );
    }
    test_field_panergba();
    fn test_field_legendrgba() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).legendrgba) as usize - ptr as usize
            },
            88usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(legendrgba)
            )
        );
    }
    test_field_legendrgba();
    fn test_field_textrgb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).textrgb) as usize - ptr as usize
            },
            104usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(textrgb)
            )
        );
    }
    test_field_textrgb();
    fn test_field_linergb() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linergb) as usize - ptr as usize
            },
            116usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(linergb)
            )
        );
    }
    test_field_linergb();
    fn test_field_range() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).range) as usize - ptr as usize
            },
            1316usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(range)
            )
        );
    }
    test_field_range();
    fn test_field_xformat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xformat) as usize - ptr as usize
            },
            1332usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(xformat)
            )
        );
    }
    test_field_xformat();
    fn test_field_yformat() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).yformat) as usize - ptr as usize
            },
            1352usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(yformat)
            )
        );
    }
    test_field_yformat();
    fn test_field_minwidth() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).minwidth) as usize - ptr as usize
            },
            1372usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(minwidth)
            )
        );
    }
    test_field_minwidth();
    fn test_field_title() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).title) as usize - ptr as usize
            },
            1392usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(title)
            )
        );
    }
    test_field_title();
    fn test_field_xlabel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xlabel) as usize - ptr as usize
            },
            2392usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(xlabel)
            )
        );
    }
    test_field_xlabel();
    fn test_field_linename() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linename) as usize - ptr as usize
            },
            2492usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(linename)
            )
        );
    }
    test_field_linename();
    fn test_field_legendoffset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).legendoffset) as usize - ptr as usize
            },
            12492usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(legendoffset)
            )
        );
    }
    test_field_legendoffset();
    fn test_field_subplot() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).subplot) as usize - ptr as usize
            },
            12496usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(subplot)
            )
        );
    }
    test_field_subplot();
    fn test_field_highlight() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).highlight) as usize - ptr as usize
            },
            12500usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(highlight)
            )
        );
    }
    test_field_highlight();
    fn test_field_highlightid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).highlightid) as usize - ptr as usize
            },
            12508usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(highlightid)
            )
        );
    }
    test_field_highlightid();
    fn test_field_selection() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).selection) as usize - ptr as usize
            },
            12512usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(selection)
            )
        );
    }
    test_field_selection();
    fn test_field_linepnt() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linepnt) as usize - ptr as usize
            },
            12516usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(linepnt)
            )
        );
    }
    test_field_linepnt();
    fn test_field_linedata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).linedata) as usize - ptr as usize
            },
            12916usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(linedata)
            )
        );
    }
    test_field_linedata();
    fn test_field_xaxispixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xaxispixel) as usize - ptr as usize
            },
            812916usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(xaxispixel)
            )
        );
    }
    test_field_xaxispixel();
    fn test_field_yaxispixel() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).yaxispixel) as usize - ptr as usize
            },
            812924usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(yaxispixel)
            )
        );
    }
    test_field_yaxispixel();
    fn test_field_xaxisdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).xaxisdata) as usize - ptr as usize
            },
            812932usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(xaxisdata)
            )
        );
    }
    test_field_xaxisdata();
    fn test_field_yaxisdata() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<mjvFigure_>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).yaxisdata) as usize - ptr as usize
            },
            812940usize,
            concat!(
                "Offset of field: ",
                stringify!(mjvFigure_),
                "::",
                stringify!(yaxisdata)
            )
        );
    }
    test_field_yaxisdata();
}
impl Default for mjvFigure_ {
    fn default() -> Self {
        let mut s = ::std::mem::MaybeUninit::<Self>::uninit();
        unsafe {
            ::std::ptr::write_bytes(s.as_mut_ptr(), 0, 1);
            s.assume_init()
        }
    }
}
pub type mjvFigure = mjvFigure_;
extern "C" {
    pub static mut mju_user_error: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char),
    >;
}
extern "C" {
    pub static mut mju_user_warning: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char),
    >;
}
extern "C" {
    pub static mut mju_user_malloc: ::std::option::Option<
        unsafe extern "C" fn(arg1: usize) -> *mut ::std::os::raw::c_void,
    >;
}
extern "C" {
    pub static mut mju_user_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
}
extern "C" {
    pub static mut mjcb_passive: mjfGeneric;
}
extern "C" {
    pub static mut mjcb_control: mjfGeneric;
}
extern "C" {
    pub static mut mjcb_contactfilter: mjfConFilt;
}
extern "C" {
    pub static mut mjcb_sensor: mjfSensor;
}
extern "C" {
    pub static mut mjcb_time: mjfTime;
}
extern "C" {
    pub static mut mjcb_act_dyn: mjfAct;
}
extern "C" {
    pub static mut mjcb_act_gain: mjfAct;
}
extern "C" {
    pub static mut mjcb_act_bias: mjfAct;
}
extern "C" {
    pub static mut mjCOLLISIONFUNC: [[mjfCollision; 8usize]; 8usize];
}
extern "C" {
    pub static mut mjDISABLESTRING: [*const ::std::os::raw::c_char; 13usize];
}
extern "C" {
    pub static mut mjENABLESTRING: [*const ::std::os::raw::c_char; 5usize];
}
extern "C" {
    pub static mut mjTIMERSTRING: [*const ::std::os::raw::c_char; 13usize];
}
extern "C" {
    pub static mut mjLABELSTRING: [*const ::std::os::raw::c_char; 14usize];
}
extern "C" {
    pub static mut mjFRAMESTRING: [*const ::std::os::raw::c_char; 8usize];
}
extern "C" {
    pub static mut mjVISSTRING: [[*const ::std::os::raw::c_char; 3usize]; 23usize];
}
extern "C" {
    pub fn mj_defaultVFS(vfs: *mut mjVFS);
}
extern "C" {
    pub fn mj_addFileVFS(
        vfs: *mut mjVFS,
        directory: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_makeEmptyFileVFS(
        vfs: *mut mjVFS,
        filename: *const ::std::os::raw::c_char,
        filesize: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_findFileVFS(
        vfs: *const mjVFS,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_deleteFileVFS(
        vfs: *mut mjVFS,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_deleteVFS(vfs: *mut mjVFS);
}
extern "C" {
    pub fn mj_loadXML(
        filename: *const ::std::os::raw::c_char,
        vfs: *const mjVFS,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> *mut mjModel;
}
extern "C" {
    pub fn mj_saveLastXML(
        filename: *const ::std::os::raw::c_char,
        m: *const mjModel,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_freeLastXML();
}
extern "C" {
    pub fn mj_printSchema(
        filename: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_char,
        buffer_sz: ::std::os::raw::c_int,
        flg_html: ::std::os::raw::c_int,
        flg_pad: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_step(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_step1(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_step2(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_forward(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_inverse(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_forwardSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::std::os::raw::c_int,
        skipsensor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_inverseSkip(
        m: *const mjModel,
        d: *mut mjData,
        skipstage: ::std::os::raw::c_int,
        skipsensor: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_defaultLROpt(opt: *mut mjLROpt);
}
extern "C" {
    pub fn mj_defaultSolRefImp(solref: *mut mjtNum, solimp: *mut mjtNum);
}
extern "C" {
    pub fn mj_defaultOption(opt: *mut mjOption);
}
extern "C" {
    pub fn mj_defaultVisual(vis: *mut mjVisual);
}
extern "C" {
    pub fn mj_copyModel(dest: *mut mjModel, src: *const mjModel) -> *mut mjModel;
}
extern "C" {
    pub fn mj_saveModel(
        m: *const mjModel,
        filename: *const ::std::os::raw::c_char,
        buffer: *mut ::std::os::raw::c_void,
        buffer_sz: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_loadModel(
        filename: *const ::std::os::raw::c_char,
        vfs: *const mjVFS,
    ) -> *mut mjModel;
}
extern "C" {
    pub fn mj_deleteModel(m: *mut mjModel);
}
extern "C" {
    pub fn mj_sizeModel(m: *const mjModel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_makeData(m: *const mjModel) -> *mut mjData;
}
extern "C" {
    pub fn mj_copyData(
        dest: *mut mjData,
        m: *const mjModel,
        src: *const mjData,
    ) -> *mut mjData;
}
extern "C" {
    pub fn mj_resetData(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_resetDataDebug(
        m: *const mjModel,
        d: *mut mjData,
        debug_value: ::std::os::raw::c_uchar,
    );
}
extern "C" {
    pub fn mj_resetDataKeyframe(
        m: *const mjModel,
        d: *mut mjData,
        key: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_stackAlloc(d: *mut mjData, size: ::std::os::raw::c_int) -> *mut mjtNum;
}
extern "C" {
    pub fn mj_deleteData(d: *mut mjData);
}
extern "C" {
    pub fn mj_resetCallbacks();
}
extern "C" {
    pub fn mj_setConst(m: *mut mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_setLengthRange(
        m: *mut mjModel,
        d: *mut mjData,
        index: ::std::os::raw::c_int,
        opt: *const mjLROpt,
        error: *mut ::std::os::raw::c_char,
        error_sz: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_printFormattedModel(
        m: *const mjModel,
        filename: *const ::std::os::raw::c_char,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mj_printModel(m: *const mjModel, filename: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mj_printFormattedData(
        m: *const mjModel,
        d: *mut mjData,
        filename: *const ::std::os::raw::c_char,
        float_format: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mj_printData(
        m: *const mjModel,
        d: *mut mjData,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mju_printMat(
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_printMatSparse(
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        rownnz: *const ::std::os::raw::c_int,
        rowadr: *const ::std::os::raw::c_int,
        colind: *const ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_fwdPosition(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_fwdVelocity(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_fwdActuation(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_fwdAcceleration(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_fwdConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_Euler(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_RungeKutta(m: *const mjModel, d: *mut mjData, N: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mj_invPosition(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_invVelocity(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_invConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_compareFwdInv(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_sensorPos(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_sensorVel(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_sensorAcc(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_energyPos(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_energyVel(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_checkPos(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_checkVel(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_checkAcc(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_kinematics(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_comPos(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_camlight(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_tendon(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_transmission(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_crb(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_factorM(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_solveM(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_solveM2(
        m: *const mjModel,
        d: *mut mjData,
        x: *mut mjtNum,
        y: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_comVel(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_passive(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_subtreeVel(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_rne(
        m: *const mjModel,
        d: *mut mjData,
        flg_acc: ::std::os::raw::c_int,
        result: *mut mjtNum,
    );
}
extern "C" {
    pub fn mj_rnePostConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_collision(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_makeConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_projectConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_referenceConstraint(m: *const mjModel, d: *mut mjData);
}
extern "C" {
    pub fn mj_constraintUpdate(
        m: *const mjModel,
        d: *mut mjData,
        jar: *const mjtNum,
        cost: *mut mjtNum,
        flg_coneHessian: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_addContact(
        m: *const mjModel,
        d: *mut mjData,
        con: *const mjContact,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_isPyramidal(m: *const mjModel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_isSparse(m: *const mjModel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_isDual(m: *const mjModel) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_mulJacVec(
        m: *const mjModel,
        d: *mut mjData,
        res: *mut mjtNum,
        vec: *const mjtNum,
    );
}
extern "C" {
    pub fn mj_mulJacTVec(
        m: *const mjModel,
        d: *mut mjData,
        res: *mut mjtNum,
        vec: *const mjtNum,
    );
}
extern "C" {
    pub fn mj_jac(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        point: *const mjtNum,
        body: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacBody(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacBodyCom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacSubtreeCom(
        m: *const mjModel,
        d: *mut mjData,
        jacp: *mut mjtNum,
        body: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacGeom(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        geom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacSite(
        m: *const mjModel,
        d: *const mjData,
        jacp: *mut mjtNum,
        jacr: *mut mjtNum,
        site: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_jacPointAxis(
        m: *const mjModel,
        d: *mut mjData,
        jacPoint: *mut mjtNum,
        jacAxis: *mut mjtNum,
        point: *const mjtNum,
        axis: *const mjtNum,
        body: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_name2id(
        m: *const mjModel,
        type_: ::std::os::raw::c_int,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_id2name(
        m: *const mjModel,
        type_: ::std::os::raw::c_int,
        id: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mj_fullM(m: *const mjModel, dst: *mut mjtNum, M: *const mjtNum);
}
extern "C" {
    pub fn mj_mulM(
        m: *const mjModel,
        d: *const mjData,
        res: *mut mjtNum,
        vec: *const mjtNum,
    );
}
extern "C" {
    pub fn mj_mulM2(
        m: *const mjModel,
        d: *const mjData,
        res: *mut mjtNum,
        vec: *const mjtNum,
    );
}
extern "C" {
    pub fn mj_addM(
        m: *const mjModel,
        d: *mut mjData,
        dst: *mut mjtNum,
        rownnz: *mut ::std::os::raw::c_int,
        rowadr: *mut ::std::os::raw::c_int,
        colind: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_applyFT(
        m: *const mjModel,
        d: *mut mjData,
        force: *const mjtNum,
        torque: *const mjtNum,
        point: *const mjtNum,
        body: ::std::os::raw::c_int,
        qfrc_target: *mut mjtNum,
    );
}
extern "C" {
    pub fn mj_objectVelocity(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::std::os::raw::c_int,
        objid: ::std::os::raw::c_int,
        res: *mut mjtNum,
        flg_local: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_objectAcceleration(
        m: *const mjModel,
        d: *const mjData,
        objtype: ::std::os::raw::c_int,
        objid: ::std::os::raw::c_int,
        res: *mut mjtNum,
        flg_local: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mj_contactForce(
        m: *const mjModel,
        d: *const mjData,
        id: ::std::os::raw::c_int,
        result: *mut mjtNum,
    );
}
extern "C" {
    pub fn mj_differentiatePos(
        m: *const mjModel,
        qvel: *mut mjtNum,
        dt: mjtNum,
        qpos1: *const mjtNum,
        qpos2: *const mjtNum,
    );
}
extern "C" {
    pub fn mj_integratePos(
        m: *const mjModel,
        qpos: *mut mjtNum,
        qvel: *const mjtNum,
        dt: mjtNum,
    );
}
extern "C" {
    pub fn mj_normalizeQuat(m: *const mjModel, qpos: *mut mjtNum);
}
extern "C" {
    pub fn mj_local2Global(
        d: *mut mjData,
        xpos: *mut mjtNum,
        xmat: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
        body: ::std::os::raw::c_int,
        sameframe: mjtByte,
    );
}
extern "C" {
    pub fn mj_getTotalmass(m: *const mjModel) -> mjtNum;
}
extern "C" {
    pub fn mj_setTotalmass(m: *mut mjModel, newmass: mjtNum);
}
extern "C" {
    pub fn mj_getPluginConfig(
        m: *const mjModel,
        plugin_id: ::std::os::raw::c_int,
        attrib: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mj_version() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_versionString() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mj_ray(
        m: *const mjModel,
        d: *const mjData,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        geomgroup: *const mjtByte,
        flg_static: mjtByte,
        bodyexclude: ::std::os::raw::c_int,
        geomid: *mut ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mj_rayHfield(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::std::os::raw::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
    ) -> mjtNum;
}
extern "C" {
    pub fn mj_rayMesh(
        m: *const mjModel,
        d: *const mjData,
        geomid: ::std::os::raw::c_int,
        pnt: *const mjtNum,
        vec: *const mjtNum,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_rayGeom(
        pos: *const mjtNum,
        mat: *const mjtNum,
        size: *const mjtNum,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        geomtype: ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_raySkin(
        nface: ::std::os::raw::c_int,
        nvert: ::std::os::raw::c_int,
        face: *const ::std::os::raw::c_int,
        vert: *const f32,
        pnt: *const mjtNum,
        vec: *const mjtNum,
        vertid: *mut ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mjv_defaultCamera(cam: *mut mjvCamera);
}
extern "C" {
    pub fn mjv_defaultFreeCamera(m: *const mjModel, cam: *mut mjvCamera);
}
extern "C" {
    pub fn mjv_defaultPerturb(pert: *mut mjvPerturb);
}
extern "C" {
    pub fn mjv_room2model(
        modelpos: *mut mjtNum,
        modelquat: *mut mjtNum,
        roompos: *const mjtNum,
        roomquat: *const mjtNum,
        scn: *const mjvScene,
    );
}
extern "C" {
    pub fn mjv_model2room(
        roompos: *mut mjtNum,
        roomquat: *mut mjtNum,
        modelpos: *const mjtNum,
        modelquat: *const mjtNum,
        scn: *const mjvScene,
    );
}
extern "C" {
    pub fn mjv_cameraInModel(
        headpos: *mut mjtNum,
        forward: *mut mjtNum,
        up: *mut mjtNum,
        scn: *const mjvScene,
    );
}
extern "C" {
    pub fn mjv_cameraInRoom(
        headpos: *mut mjtNum,
        forward: *mut mjtNum,
        up: *mut mjtNum,
        scn: *const mjvScene,
    );
}
extern "C" {
    pub fn mjv_frustumHeight(scn: *const mjvScene) -> mjtNum;
}
extern "C" {
    pub fn mjv_alignToCamera(
        res: *mut mjtNum,
        vec: *const mjtNum,
        forward: *const mjtNum,
    );
}
extern "C" {
    pub fn mjv_moveCamera(
        m: *const mjModel,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        cam: *mut mjvCamera,
    );
}
extern "C" {
    pub fn mjv_movePerturb(
        m: *const mjModel,
        d: *const mjData,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
}
extern "C" {
    pub fn mjv_moveModel(
        m: *const mjModel,
        action: ::std::os::raw::c_int,
        reldx: mjtNum,
        reldy: mjtNum,
        roomup: *const mjtNum,
        scn: *mut mjvScene,
    );
}
extern "C" {
    pub fn mjv_initPerturb(
        m: *const mjModel,
        d: *const mjData,
        scn: *const mjvScene,
        pert: *mut mjvPerturb,
    );
}
extern "C" {
    pub fn mjv_applyPerturbPose(
        m: *const mjModel,
        d: *mut mjData,
        pert: *const mjvPerturb,
        flg_paused: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjv_applyPerturbForce(
        m: *const mjModel,
        d: *mut mjData,
        pert: *const mjvPerturb,
    );
}
extern "C" {
    pub fn mjv_averageCamera(
        cam1: *const mjvGLCamera,
        cam2: *const mjvGLCamera,
    ) -> mjvGLCamera;
}
extern "C" {
    pub fn mjv_select(
        m: *const mjModel,
        d: *const mjData,
        vopt: *const mjvOption,
        aspectratio: mjtNum,
        relx: mjtNum,
        rely: mjtNum,
        scn: *const mjvScene,
        selpnt: *mut mjtNum,
        geomid: *mut ::std::os::raw::c_int,
        skinid: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mjv_defaultOption(opt: *mut mjvOption);
}
extern "C" {
    pub fn mjv_defaultFigure(fig: *mut mjvFigure);
}
extern "C" {
    pub fn mjv_initGeom(
        geom: *mut mjvGeom,
        type_: ::std::os::raw::c_int,
        size: *const mjtNum,
        pos: *const mjtNum,
        mat: *const mjtNum,
        rgba: *const f32,
    );
}
extern "C" {
    pub fn mjv_makeConnector(
        geom: *mut mjvGeom,
        type_: ::std::os::raw::c_int,
        width: mjtNum,
        a0: mjtNum,
        a1: mjtNum,
        a2: mjtNum,
        b0: mjtNum,
        b1: mjtNum,
        b2: mjtNum,
    );
}
extern "C" {
    pub fn mjv_defaultScene(scn: *mut mjvScene);
}
extern "C" {
    pub fn mjv_makeScene(
        m: *const mjModel,
        scn: *mut mjvScene,
        maxgeom: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjv_freeScene(scn: *mut mjvScene);
}
extern "C" {
    pub fn mjv_updateScene(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        cam: *mut mjvCamera,
        catmask: ::std::os::raw::c_int,
        scn: *mut mjvScene,
    );
}
extern "C" {
    pub fn mjv_addGeoms(
        m: *const mjModel,
        d: *mut mjData,
        opt: *const mjvOption,
        pert: *const mjvPerturb,
        catmask: ::std::os::raw::c_int,
        scn: *mut mjvScene,
    );
}
extern "C" {
    pub fn mjv_makeLights(m: *const mjModel, d: *mut mjData, scn: *mut mjvScene);
}
extern "C" {
    pub fn mjv_updateCamera(
        m: *const mjModel,
        d: *mut mjData,
        cam: *mut mjvCamera,
        scn: *mut mjvScene,
    );
}
extern "C" {
    pub fn mjv_updateSkin(m: *const mjModel, d: *mut mjData, scn: *mut mjvScene);
}
extern "C" {
    pub fn mjui_themeSpacing(ind: ::std::os::raw::c_int) -> mjuiThemeSpacing;
}
extern "C" {
    pub fn mjui_themeColor(ind: ::std::os::raw::c_int) -> mjuiThemeColor;
}
extern "C" {
    pub fn mjui_add(ui: *mut mjUI, def: *const mjuiDef);
}
extern "C" {
    pub fn mjui_addToSection(
        ui: *mut mjUI,
        sect: ::std::os::raw::c_int,
        def: *const mjuiDef,
    );
}
extern "C" {
    pub fn mjui_resize(ui: *mut mjUI, con: *const mjrContext);
}
extern "C" {
    pub fn mjui_update(
        section: ::std::os::raw::c_int,
        item: ::std::os::raw::c_int,
        ui: *const mjUI,
        state: *const mjuiState,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjui_event(
        ui: *mut mjUI,
        state: *mut mjuiState,
        con: *const mjrContext,
    ) -> *mut mjuiItem;
}
extern "C" {
    pub fn mjui_render(ui: *mut mjUI, state: *const mjuiState, con: *const mjrContext);
}
extern "C" {
    pub fn mju_error(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mju_error_i(msg: *const ::std::os::raw::c_char, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_error_s(
        msg: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mju_warning(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn mju_warning_i(msg: *const ::std::os::raw::c_char, i: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_warning_s(
        msg: *const ::std::os::raw::c_char,
        text: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mju_clearHandlers();
}
extern "C" {
    pub fn mju_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mju_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn mj_warning(
        d: *mut mjData,
        warning: ::std::os::raw::c_int,
        info: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_writeLog(
        type_: *const ::std::os::raw::c_char,
        msg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn mj_activate(
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mj_deactivate();
}
extern "C" {
    pub fn mju_zero3(res: *mut mjtNum);
}
extern "C" {
    pub fn mju_copy3(res: *mut mjtNum, data: *const mjtNum);
}
extern "C" {
    pub fn mju_scl3(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum);
}
extern "C" {
    pub fn mju_add3(res: *mut mjtNum, vec1: *const mjtNum, vec2: *const mjtNum);
}
extern "C" {
    pub fn mju_sub3(res: *mut mjtNum, vec1: *const mjtNum, vec2: *const mjtNum);
}
extern "C" {
    pub fn mju_addTo3(res: *mut mjtNum, vec: *const mjtNum);
}
extern "C" {
    pub fn mju_subFrom3(res: *mut mjtNum, vec: *const mjtNum);
}
extern "C" {
    pub fn mju_addToScl3(res: *mut mjtNum, vec: *const mjtNum, scl: mjtNum);
}
extern "C" {
    pub fn mju_addScl3(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        scl: mjtNum,
    );
}
extern "C" {
    pub fn mju_normalize3(res: *mut mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_norm3(vec: *const mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_dot3(vec1: *const mjtNum, vec2: *const mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_dist3(pos1: *const mjtNum, pos2: *const mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_rotVecMat(res: *mut mjtNum, vec: *const mjtNum, mat: *const mjtNum);
}
extern "C" {
    pub fn mju_rotVecMatT(res: *mut mjtNum, vec: *const mjtNum, mat: *const mjtNum);
}
extern "C" {
    pub fn mju_cross(res: *mut mjtNum, a: *const mjtNum, b: *const mjtNum);
}
extern "C" {
    pub fn mju_zero4(res: *mut mjtNum);
}
extern "C" {
    pub fn mju_unit4(res: *mut mjtNum);
}
extern "C" {
    pub fn mju_copy4(res: *mut mjtNum, data: *const mjtNum);
}
extern "C" {
    pub fn mju_normalize4(res: *mut mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_zero(res: *mut mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_copy(res: *mut mjtNum, data: *const mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_sum(vec: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
extern "C" {
    pub fn mju_L1(vec: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
extern "C" {
    pub fn mju_scl(
        res: *mut mjtNum,
        vec: *const mjtNum,
        scl: mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_add(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_sub(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_addTo(res: *mut mjtNum, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_subFrom(res: *mut mjtNum, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_addToScl(
        res: *mut mjtNum,
        vec: *const mjtNum,
        scl: mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_addScl(
        res: *mut mjtNum,
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        scl: mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_normalize(res: *mut mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
extern "C" {
    pub fn mju_norm(res: *const mjtNum, n: ::std::os::raw::c_int) -> mjtNum;
}
extern "C" {
    pub fn mju_dot(
        vec1: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_mulMatVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_mulMatTVec(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_mulVecMatVec(
        vec1: *const mjtNum,
        mat: *const mjtNum,
        vec2: *const mjtNum,
        n: ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_transpose(
        res: *mut mjtNum,
        mat: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_mulMatMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        c2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_mulMatMatT(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        r2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_mulMatTMat(
        res: *mut mjtNum,
        mat1: *const mjtNum,
        mat2: *const mjtNum,
        r1: ::std::os::raw::c_int,
        c1: ::std::os::raw::c_int,
        c2: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_sqrMatTD(
        res: *mut mjtNum,
        mat: *const mjtNum,
        diag: *const mjtNum,
        nr: ::std::os::raw::c_int,
        nc: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_transformSpatial(
        res: *mut mjtNum,
        vec: *const mjtNum,
        flg_force: ::std::os::raw::c_int,
        newpos: *const mjtNum,
        oldpos: *const mjtNum,
        rotnew2old: *const mjtNum,
    );
}
extern "C" {
    pub fn mju_rotVecQuat(res: *mut mjtNum, vec: *const mjtNum, quat: *const mjtNum);
}
extern "C" {
    pub fn mju_negQuat(res: *mut mjtNum, quat: *const mjtNum);
}
extern "C" {
    pub fn mju_mulQuat(res: *mut mjtNum, quat1: *const mjtNum, quat2: *const mjtNum);
}
extern "C" {
    pub fn mju_mulQuatAxis(res: *mut mjtNum, quat: *const mjtNum, axis: *const mjtNum);
}
extern "C" {
    pub fn mju_axisAngle2Quat(res: *mut mjtNum, axis: *const mjtNum, angle: mjtNum);
}
extern "C" {
    pub fn mju_quat2Vel(res: *mut mjtNum, quat: *const mjtNum, dt: mjtNum);
}
extern "C" {
    pub fn mju_subQuat(res: *mut mjtNum, qa: *const mjtNum, qb: *const mjtNum);
}
extern "C" {
    pub fn mju_quat2Mat(res: *mut mjtNum, quat: *const mjtNum);
}
extern "C" {
    pub fn mju_mat2Quat(quat: *mut mjtNum, mat: *const mjtNum);
}
extern "C" {
    pub fn mju_derivQuat(res: *mut mjtNum, quat: *const mjtNum, vel: *const mjtNum);
}
extern "C" {
    pub fn mju_quatIntegrate(quat: *mut mjtNum, vel: *const mjtNum, scale: mjtNum);
}
extern "C" {
    pub fn mju_quatZ2Vec(quat: *mut mjtNum, vec: *const mjtNum);
}
extern "C" {
    pub fn mju_mulPose(
        posres: *mut mjtNum,
        quatres: *mut mjtNum,
        pos1: *const mjtNum,
        quat1: *const mjtNum,
        pos2: *const mjtNum,
        quat2: *const mjtNum,
    );
}
extern "C" {
    pub fn mju_negPose(
        posres: *mut mjtNum,
        quatres: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
    );
}
extern "C" {
    pub fn mju_trnVecPose(
        res: *mut mjtNum,
        pos: *const mjtNum,
        quat: *const mjtNum,
        vec: *const mjtNum,
    );
}
extern "C" {
    pub fn mju_cholFactor(
        mat: *mut mjtNum,
        n: ::std::os::raw::c_int,
        mindiag: mjtNum,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_cholSolve(
        res: *mut mjtNum,
        mat: *const mjtNum,
        vec: *const mjtNum,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_cholUpdate(
        mat: *mut mjtNum,
        x: *mut mjtNum,
        n: ::std::os::raw::c_int,
        flg_plus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_eig3(
        eigval: *mut mjtNum,
        eigvec: *mut mjtNum,
        quat: *mut mjtNum,
        mat: *const mjtNum,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_boxQP(
        res: *mut mjtNum,
        R: *mut mjtNum,
        index: *mut ::std::os::raw::c_int,
        H: *const mjtNum,
        g: *const mjtNum,
        n: ::std::os::raw::c_int,
        lower: *const mjtNum,
        upper: *const mjtNum,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_boxQPmalloc(
        res: *mut *mut mjtNum,
        R: *mut *mut mjtNum,
        index: *mut *mut ::std::os::raw::c_int,
        H: *mut *mut mjtNum,
        g: *mut *mut mjtNum,
        n: ::std::os::raw::c_int,
        lower: *mut *mut mjtNum,
        upper: *mut *mut mjtNum,
    );
}
extern "C" {
    pub fn mju_muscleGain(
        len: mjtNum,
        vel: mjtNum,
        lengthrange: *const mjtNum,
        acc0: mjtNum,
        prm: *const mjtNum,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_muscleBias(
        len: mjtNum,
        lengthrange: *const mjtNum,
        acc0: mjtNum,
        prm: *const mjtNum,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_muscleDynamics(ctrl: mjtNum, act: mjtNum, prm: *const mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_encodePyramid(
        pyramid: *mut mjtNum,
        force: *const mjtNum,
        mu: *const mjtNum,
        dim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_decodePyramid(
        force: *mut mjtNum,
        pyramid: *const mjtNum,
        mu: *const mjtNum,
        dim: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_springDamper(
        pos0: mjtNum,
        vel0: mjtNum,
        Kp: mjtNum,
        Kv: mjtNum,
        dt: mjtNum,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_min(a: mjtNum, b: mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_max(a: mjtNum, b: mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_clip(x: mjtNum, min: mjtNum, max: mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_sign(x: mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_round(x: mjtNum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_type2Str(type_: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mju_str2Type(str_: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_warningText(
        warning: ::std::os::raw::c_int,
        info: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn mju_isBad(x: mjtNum) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_isZero(
        vec: *mut mjtNum,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mju_standardNormal(num2: *mut mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mju_f2n(res: *mut mjtNum, vec: *const f32, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_n2f(res: *mut f32, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_d2n(res: *mut mjtNum, vec: *const f64, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_n2d(res: *mut f64, vec: *const mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_insertionSort(list: *mut mjtNum, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mju_insertionSortInt(
        list: *mut ::std::os::raw::c_int,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mju_Halton(
        index: ::std::os::raw::c_int,
        base: ::std::os::raw::c_int,
    ) -> mjtNum;
}
extern "C" {
    pub fn mju_strncpy(
        dst: *mut ::std::os::raw::c_char,
        src: *const ::std::os::raw::c_char,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mju_sigmoid(x: mjtNum) -> mjtNum;
}
extern "C" {
    pub fn mjd_transitionFD(
        m: *const mjModel,
        d: *mut mjData,
        eps: mjtNum,
        centered: mjtByte,
        A: *mut mjtNum,
        B: *mut mjtNum,
        C: *mut mjtNum,
        D: *mut mjtNum,
    );
}
extern "C" {
    pub fn mjp_defaultPlugin(plugin: *mut mjpPlugin);
}
extern "C" {
    pub fn mjp_registerPlugin(plugin: *const mjpPlugin) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mjp_pluginCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mjp_getPlugin(
        name: *const ::std::os::raw::c_char,
        slot: *mut ::std::os::raw::c_int,
    ) -> *const mjpPlugin;
}
extern "C" {
    pub fn mjp_getPluginAtSlot(slot: ::std::os::raw::c_int) -> *const mjpPlugin;
}

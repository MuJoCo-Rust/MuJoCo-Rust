/* automatically generated by rust-bindgen 0.54.1 */

pub use crate::no_render::*;

#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct _mjrRect {
    pub left: ::std::os::raw::c_int,
    pub bottom: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__mjrRect() {
    assert_eq!(
        ::std::mem::size_of::<_mjrRect>(),
        16usize,
        concat!("Size of: ", stringify!(_mjrRect))
    );
    assert_eq!(
        ::std::mem::align_of::<_mjrRect>(),
        4usize,
        concat!("Alignment of ", stringify!(_mjrRect))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrRect>())).left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrRect),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrRect>())).bottom as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrRect),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrRect>())).width as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrRect),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrRect>())).height as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrRect),
            "::",
            stringify!(height)
        )
    );
}
pub type mjrRect = _mjrRect;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _mjrContext {
    pub lineWidth: f32,
    pub shadowClip: f32,
    pub shadowScale: f32,
    pub fogStart: f32,
    pub fogEnd: f32,
    pub fogRGBA: [f32; 4usize],
    pub shadowSize: ::std::os::raw::c_int,
    pub offWidth: ::std::os::raw::c_int,
    pub offHeight: ::std::os::raw::c_int,
    pub offSamples: ::std::os::raw::c_int,
    pub fontScale: ::std::os::raw::c_int,
    pub auxWidth: [::std::os::raw::c_int; 10usize],
    pub auxHeight: [::std::os::raw::c_int; 10usize],
    pub auxSamples: [::std::os::raw::c_int; 10usize],
    pub offFBO: ::std::os::raw::c_uint,
    pub offFBO_r: ::std::os::raw::c_uint,
    pub offColor: ::std::os::raw::c_uint,
    pub offColor_r: ::std::os::raw::c_uint,
    pub offDepthStencil: ::std::os::raw::c_uint,
    pub offDepthStencil_r: ::std::os::raw::c_uint,
    pub shadowFBO: ::std::os::raw::c_uint,
    pub shadowTex: ::std::os::raw::c_uint,
    pub auxFBO: [::std::os::raw::c_uint; 10usize],
    pub auxFBO_r: [::std::os::raw::c_uint; 10usize],
    pub auxColor: [::std::os::raw::c_uint; 10usize],
    pub auxColor_r: [::std::os::raw::c_uint; 10usize],
    pub ntexture: ::std::os::raw::c_int,
    pub textureType: [::std::os::raw::c_int; 100usize],
    pub texture: [::std::os::raw::c_uint; 100usize],
    pub basePlane: ::std::os::raw::c_uint,
    pub baseMesh: ::std::os::raw::c_uint,
    pub baseHField: ::std::os::raw::c_uint,
    pub baseBuiltin: ::std::os::raw::c_uint,
    pub baseFontNormal: ::std::os::raw::c_uint,
    pub baseFontShadow: ::std::os::raw::c_uint,
    pub baseFontBig: ::std::os::raw::c_uint,
    pub rangePlane: ::std::os::raw::c_int,
    pub rangeMesh: ::std::os::raw::c_int,
    pub rangeHField: ::std::os::raw::c_int,
    pub rangeBuiltin: ::std::os::raw::c_int,
    pub rangeFont: ::std::os::raw::c_int,
    pub nskin: ::std::os::raw::c_int,
    pub skinvertVBO: *mut ::std::os::raw::c_uint,
    pub skinnormalVBO: *mut ::std::os::raw::c_uint,
    pub skintexcoordVBO: *mut ::std::os::raw::c_uint,
    pub skinfaceVBO: *mut ::std::os::raw::c_uint,
    pub charWidth: [::std::os::raw::c_int; 127usize],
    pub charWidthBig: [::std::os::raw::c_int; 127usize],
    pub charHeight: ::std::os::raw::c_int,
    pub charHeightBig: ::std::os::raw::c_int,
    pub glewInitialized: ::std::os::raw::c_int,
    pub windowAvailable: ::std::os::raw::c_int,
    pub windowSamples: ::std::os::raw::c_int,
    pub windowStereo: ::std::os::raw::c_int,
    pub windowDoublebuffer: ::std::os::raw::c_int,
    pub currentBuffer: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__mjrContext() {
    assert_eq!(
        ::std::mem::size_of::<_mjrContext>(),
        2304usize,
        concat!("Size of: ", stringify!(_mjrContext))
    );
    assert_eq!(
        ::std::mem::align_of::<_mjrContext>(),
        8usize,
        concat!("Alignment of ", stringify!(_mjrContext))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).lineWidth as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(lineWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).shadowClip as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(shadowClip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).shadowScale as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(shadowScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).fogStart as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(fogStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).fogEnd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(fogEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).fogRGBA as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(fogRGBA)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).shadowSize as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(shadowSize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offWidth as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offHeight as *const _ as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offSamples as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).fontScale as *const _ as usize
        },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(fontScale)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxWidth as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxHeight as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxSamples as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxSamples)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).offFBO as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offFBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offFBO_r as *const _ as usize
        },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offFBO_r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offColor as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offColor_r as *const _ as usize
        },
        188usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offColor_r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offDepthStencil as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offDepthStencil)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).offDepthStencil_r as *const _
                as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(offDepthStencil_r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).shadowFBO as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(shadowFBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).shadowTex as *const _ as usize
        },
        204usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(shadowTex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).auxFBO as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxFBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxFBO_r as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxFBO_r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxColor as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxColor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).auxColor_r as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(auxColor_r)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).ntexture as *const _ as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(ntexture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).textureType as *const _ as usize
        },
        372usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(textureType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).texture as *const _ as usize },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(texture)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).basePlane as *const _ as usize
        },
        1172usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(basePlane)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseMesh as *const _ as usize
        },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseMesh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseHField as *const _ as usize
        },
        1180usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseHField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseBuiltin as *const _ as usize
        },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseBuiltin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseFontNormal as *const _ as usize
        },
        1188usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseFontNormal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseFontShadow as *const _ as usize
        },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseFontShadow)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).baseFontBig as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(baseFontBig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).rangePlane as *const _ as usize
        },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(rangePlane)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).rangeMesh as *const _ as usize
        },
        1204usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(rangeMesh)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).rangeHField as *const _ as usize
        },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(rangeHField)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).rangeBuiltin as *const _ as usize
        },
        1212usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(rangeBuiltin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).rangeFont as *const _ as usize
        },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(rangeFont)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_mjrContext>())).nskin as *const _ as usize },
        1220usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(nskin)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).skinvertVBO as *const _ as usize
        },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(skinvertVBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).skinnormalVBO as *const _ as usize
        },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(skinnormalVBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).skintexcoordVBO as *const _ as usize
        },
        1240usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(skintexcoordVBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).skinfaceVBO as *const _ as usize
        },
        1248usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(skinfaceVBO)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).charWidth as *const _ as usize
        },
        1256usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(charWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).charWidthBig as *const _ as usize
        },
        1764usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(charWidthBig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).charHeight as *const _ as usize
        },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(charHeight)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).charHeightBig as *const _ as usize
        },
        2276usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(charHeightBig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).glewInitialized as *const _ as usize
        },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(glewInitialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).windowAvailable as *const _ as usize
        },
        2284usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(windowAvailable)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).windowSamples as *const _ as usize
        },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(windowSamples)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).windowStereo as *const _ as usize
        },
        2292usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(windowStereo)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).windowDoublebuffer as *const _
                as usize
        },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(windowDoublebuffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_mjrContext>())).currentBuffer as *const _ as usize
        },
        2300usize,
        concat!(
            "Offset of field: ",
            stringify!(_mjrContext),
            "::",
            stringify!(currentBuffer)
        )
    );
}
impl Default for _mjrContext {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub type mjrContext = _mjrContext;
extern "C" {
    pub fn mjr_defaultContext(con: *mut mjrContext);
}
extern "C" {
    pub fn mjr_makeContext(
        m: *const mjModel,
        con: *mut mjrContext,
        fontscale: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjr_changeFont(fontscale: ::std::os::raw::c_int, con: *mut mjrContext);
}
extern "C" {
    pub fn mjr_addAux(
        index: ::std::os::raw::c_int,
        width: ::std::os::raw::c_int,
        height: ::std::os::raw::c_int,
        samples: ::std::os::raw::c_int,
        con: *mut mjrContext,
    );
}
extern "C" {
    pub fn mjr_freeContext(con: *mut mjrContext);
}
extern "C" {
    pub fn mjr_uploadTexture(
        m: *const mjModel,
        con: *const mjrContext,
        texid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjr_uploadMesh(
        m: *const mjModel,
        con: *const mjrContext,
        meshid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjr_uploadHField(
        m: *const mjModel,
        con: *const mjrContext,
        hfieldid: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mjr_restoreBuffer(con: *const mjrContext);
}
extern "C" {
    pub fn mjr_setBuffer(framebuffer: ::std::os::raw::c_int, con: *mut mjrContext);
}
extern "C" {
    pub fn mjr_readPixels(
        rgb: *mut ::std::os::raw::c_uchar,
        depth: *mut f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjr_drawPixels(
        rgb: *const ::std::os::raw::c_uchar,
        depth: *const f32,
        viewport: mjrRect,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjr_blitBuffer(
        src: mjrRect,
        dst: mjrRect,
        flg_color: ::std::os::raw::c_int,
        flg_depth: ::std::os::raw::c_int,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjr_setAux(index: ::std::os::raw::c_int, con: *const mjrContext);
}
extern "C" {
    pub fn mjr_blitAux(
        index: ::std::os::raw::c_int,
        src: mjrRect,
        left: ::std::os::raw::c_int,
        bottom: ::std::os::raw::c_int,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjr_text(
        font: ::std::os::raw::c_int,
        txt: *const ::std::os::raw::c_char,
        con: *const mjrContext,
        x: f32,
        y: f32,
        r: f32,
        g: f32,
        b: f32,
    );
}
extern "C" {
    pub fn mjr_overlay(
        font: ::std::os::raw::c_int,
        gridpos: ::std::os::raw::c_int,
        viewport: mjrRect,
        overlay: *const ::std::os::raw::c_char,
        overlay2: *const ::std::os::raw::c_char,
        con: *const mjrContext,
    );
}
extern "C" {
    pub fn mjr_maxViewport(con: *const mjrContext) -> mjrRect;
}
extern "C" {
    pub fn mjr_rectangle(viewport: mjrRect, r: f32, g: f32, b: f32, a: f32);
}
extern "C" {
    pub fn mjr_figure(viewport: mjrRect, fig: *mut mjvFigure, con: *const mjrContext);
}
extern "C" {
    pub fn mjr_render(viewport: mjrRect, scn: *mut mjvScene, con: *const mjrContext);
}
extern "C" {
    pub fn mjr_finish();
}
extern "C" {
    pub fn mjr_getError() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mjr_findRect(
        x: ::std::os::raw::c_int,
        y: ::std::os::raw::c_int,
        nrect: ::std::os::raw::c_int,
        rect: *const mjrRect,
    ) -> ::std::os::raw::c_int;
}
